<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_TestUpdateSpecialExams]" directorySegmentName="seg_23" id="3E84DADA-126A-5DE2-19B9-30387654C67F">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[@SSNPre.x   varchar(9), 
 @NumberToAdd  int, 
 @ExamType  varchar(4), 
 @ExamDate  date.me, 
 @ExamScore  int, 
 @ExamScore2  int = NULL, 
 @ExamScore3  int = NULL, 
 @UserLogin  varchar(15) = 'SA' 
AS 
 
 
DECLARE @MarineCandidateId  int 
DECLARE @TranType  varchar(8) 
 
DECLARE @SSN    char(9) 
 
DECLARE @i   int 
DECLARE @ErrMsg   varchar(100) 
 
DECLARE @Ini.alSSN   char(9) 
DECLARE @FirstSSN  char(9) 
DECLARE @LastSSN  char(9) 
DECLARE @SSNMessage  varchar(100) 
DECLARE @LenSSNPre.x   int 
 
 
DECLARE @CandidateStatusID int 
DECLARE @StatusType  char(1) 
DECLARE @StatusCode  char(1) 
DECLARE @Disposi.onCode char(1) 
 
DECLARE @DBID INT 
DECLARE @DBNAME NVARCHAR(128) 
 
SET NOCOUNT ON  
 
SELECT  
 @DBID  = DB_ID(),  
 @DBNAME = DB_NAME() 
 
 
--- MAKE SURE THE NUMBER OF PEOPLE TO BE CONTRACTED IS BETWEEN 1 AND 9999 
IF @NumberToAdd NOT BETWEEN 1 AND 9999 
BEGIN 
 RAISERROR ('You must enter a number between 1 and 9999.', 16, 1, @DBID, @DBNAME) 
 RETURN  
END 
 
 
--- MAKE SURE THE SSN PREFIX IS 5 CHARACTERS LONG 
SET @LenSSNPre.x = LEN(@SSNPre.x) 
 
--- IF THE SSN PREFIX IS LESS THAN 5 CHARACTERS LONG, APPEND 0's UNTIL IT'S 5 CHARACTERS LONG 
IF @LenSSNPre.x < 5 
BEGIN 
 SET @SSNPre.x = RTRIM(@SSNPre.x) + REPLICATE('0', 5 - LEN(@SSNPre.x)) 
END 
 
--- INITIALIZE THE COUNTER 
SET @i = 1 
 
 
SET @Ini.alSSN = CASE  
   WHEN LEN(@SSNPre.x) = 9 THEN @SSNPre.x 
   WHEN EXISTS (SELECT 1 FROM PERSON P WHERE P.SOCIAL_SECURITY_NUMBER LIKE @SSNPre.x + '%') 
    THEN CONVERT(CHAR(9), CONVERT(INT, (SELECT MAX(P.SOCIAL_SECURITY_NUMBER) FROM PERSON P  
         WHERE P.SOCIAL_SECURITY_NUMBER LIKE @SSNPre.x + '%') + 1)) 
   ELSE @SSNPre.x + '0000' 
   END 
 
 
WHILE @i <= @NumberToAdd 
BEGIN 
 --- DEFINE THE SSN FOR THE PERSON TO BE CONTRACTED 
 SET @SSN = CONVERT(CHAR(9), CONVERT(INT, @Ini.alSSN) + (@i - 1)) 
 
 IF EXISTS (SELECT 1 FROM PERSON WHERE SOCIAL_SECURITY_NUMBER = @SSN) 
 BEGIN 
  SELECT @MarineCandidateId = PERSON_ID FROM PERSON WHERE SOCIAL_SECURITY_NUMBER = @SSN 
 END 
 ELSE 
 BEGIN 
  SET @ErrMsg = 'SSN ' + @SSN + ' does not exist in the system.' 
  RAISERROR (@ErrMsg, 16, 2, @DBID, @DBNAME) 
  RETURN 
 END 
 
 
 BEGIN TRANSACTION 
 
 IF EXISTS (SELECT 1 FROM CANDIDATE_SPECIAL_EXAM CSE 
   WHERE CSE.MARINE_CANDIDATE_ID = @MarineCandidateId AND 
   CSE.SPECIAL_EXAM_TYPE = @ExamType AND 
   CSE.SPECIAL_EXAM_DATE = @ExamDate) 
 BEGIN 
  SET @TranType = 'upda.ng' 
 
  UPDATE  
   CANDIDATE_SPECIAL_EXAM 
  SET 
   SPECIAL_EXAM_SCORE = @ExamScore, 
   SPECIAL_EXAM_SCORE2 = @ExamScore2, 
   SPECIAL_EXAM_SCORE3 = @ExamScore3, 
   USER_LOGIN = @UserLogin, 
   UPDATE_DATE = GETDATE() 
  WHERE 
   MARINE_CANDIDATE_ID = @MarineCandidateId AND 
   SPECIAL_EXAM_TYPE = @ExamType AND 
   SPECIAL_EXAM_DATE = @ExamDate 
 END 
 ELSE  
 BEGIN 
  SET @TranType = 'adding' 
 
  INSERT INTO CANDIDATE_SPECIAL_EXAM  
   (MARINE_CANDIDATE_ID, SPECIAL_EXAM_TYPE, SPECIAL_EXAM_DATE,  
   SPECIAL_EXAM_SCORE, SPECIAL_EXAM_SCORE2, SPECIAL_EXAM_SCORE3,  
   USER_LOGIN, UPDATE_DATE) 
  VALUES  
   (@MarineCandidateId, @ExamType, @ExamDate,  
   @ExamScore, @ExamScore2, @ExamScore3,  
   @UserLogin, GETDATE()) 
 END 
 
 
 IF @@ERROR != 0 OR @@ROWCOUNT = 0 
 BEGIN 
  ROLLBACK TRANSACTION 
  
  SET @ErrMsg = 'An error occurred ' + @TranType + ' the special exam record for SSN ' + @SSN + '.' 
  RAISERROR (@ErrMsg, 16, 2, @DBID, @DBNAME) 
  RETURN 
 END 
  
 --- IF WE MAKE IT HERE COMMIT THE TRANSACTION 
 COMMIT TRANSACTION 
 
 SELECT 
  @FirstSSN = CASE @i 
    WHEN 1 THEN @SSN 
    ELSE @FirstSSN 
    END, 
  @LastSSN = CASE  
    WHEN @i BETWEEN 1 AND @NumberToAdd THEN @SSN 
    ELSE @LastSSN  
    END 
 
 
 --- INCREMENT THE COUNTER 
 SET @i = @i + 1 
END 
 
SET NOCOUNT OFF 
 
 
--- DEFINE THE MESSAGE TO DISPLAY 
SET @SSNMessage = CASE  
   WHEN (@FirstSSN IS NOT NULL AND LEN(@FirstSSN) = 9) AND 
    (@LastSSN IS NOT NULL AND LEN(@LastSSN) = 9)  
   THEN 
    'Special Exams for SSN ' + @FirstSSN + ' to ' + @LastSSN + '.' 
   ELSE SPACE(0) 
   END 
 
 
IF @SSNMessage IS NOT NULL AND LEN(@SSNMessage) > 0 
BEGIN 
 PRINT @SSNMessage 
END]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>