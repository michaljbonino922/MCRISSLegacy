<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[InsertUpdateTakeOneCopyAllCardsToNextFY]" directorySegmentName="seg_15" id="995B8D14-4201-3989-B69C-68FB41F2A17E">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:43:56 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[AS 
 
DECLARE @currentFY int 
SET @currentFY = YEAR(getdate()) 
 
DECLARE @TakeOneCardID uniqueiden..er 
DECLARE @TakeOneLoca.onID uniqueiden..er 
DECLARE @TakeOneRestockID int 
 
BEGIN 
 
--set up loop counters for each card layer: 
--TakeOneCard->TakeOneLoca.on->TakeOneLoca.onRestock 
DECLARE @cardLoop int 
DECLARE @loca.onLoop int 
DECLARE @restockLoop int 
 
DECLARE takeOneCursor CURSOR FOR  
 SELECT  ID 
 FROM [RSSOSS].[USMC].[TakeOneCard] 
 WHERE FY = @currentFY 
  
OPEN takeOneCursor 
  
FETCH NEXT FROM takeOneCursor INTO @TakeOneCardID 
SET @cardLoop = @@FETCH_STATUS 
WHILE @cardLoop = 0  
 BEGIN  
 
  DECLARE @newTakeOneCardID uniqueiden..er 
  SET @newTakeOneCardID = newid() 
  
  --Insert the copy of the TakeOne Card into the table, set to the next .scal year. 
     INSERT INTO [RSSOSS].[USMC].[TakeOneCard] ( 
     ID,  
     DatePrepared, 
  FY, 
  SectorID 
     ) 
     SELECT 
   @newTakeOneCardID, 
   getdate(), 
   FY + 1, 
   SectorID 
   FROM [RSSOSS].[USMC].[TakeOneCard] 
   WHERE ID = @TakeOneCardID 
      
  --Start the cursor for each loca.on assigned to this TakeOne Card. 
  DECLARE loca.onCursor CURSOR FOR 
   SELECT ID 
   FROM [RSSOSS].[USMC].[TakeOneLoca.on] 
   WHERE TakeOneCardID = @TakeOneCardID AND IsAc.ve = 1 
 
  OPEN loca.onCursor 
 
  FETCH NEXT FROM loca.onCursor INTO @TakeOneLoca.onID 
  SET @loca.onLoop = @@FETCH_STATUS 
  WHILE @loca.onLoop = 0 
   BEGIN 
    DECLARE @newTakeOneLoca.onID uniqueiden..er 
    SET @newTakeOneLoca.onID = newid() 
    --Insert the copy of the TakeOne Loca.on into the table 
    INSERT INTO [RSSOSS].[USMC].[TakeOneLoca.on] ( 
     ID,  
     TakeOneCardID, 
     Loca.onName, 
     LocStreet1, 
     CityCode, 
     CountyCode, 
     StateCode, 
     ZipCode, 
     ContactFirstName, 
     ContactLastName, 
     ContactMiddleIni.al, 
     ContactTitle, 
     Phone, 
     EmailAddress, 
     Stock, 
     IsAc.ve     
     ) 
     SELECT 
      @newTakeOneLoca.onID, 
      @newTakeOneCardID, 
      Loca.onName, 
      LocStreet1, 
      CityCode, 
      CountyCode, 
      StateCode, 
      ZipCode, 
      ContactFirstName, 
      ContactLastName, 
      ContactMiddleIni.al, 
      ContactTitle, 
      Phone, 
      EmailAddress, 
      Stock, 
      IsAc.ve 
      FROM [RSSOSS].[USMC].[TakeOneLoca.on] 
      WHERE ID = @TakeOneLoca.onID 
 
    --Start the cursor for each restock assigned to this TakeOne Loca.on. 
    DECLARE restockCursor CURSOR FOR 
     SELECT ID 
     FROM [RSSOSS].[USMC].[TakeOneLoca.onRestock] 
     WHERE TakeOneLoca.onID = @TakeOneLoca.onID 
 
    OPEN restockCursor 
 
    FETCH NEXT FROM restockCursor INTO @TakeOneRestockID 
    SET @restockLoop = @@FETCH_STATUS 
    WHILE @restockLoop = 0 
     BEGIN 
      --Insert the copy of the TakeOne Restock into the table 
      INSERT INTO [RSSOSS].[USMC].[TakeOneLoca.onRestock] ( 
       TakeOneLoca.onID, 
       RestockDate, 
       StockAdded 
       ) 
       SELECT 
        @newTakeOneLoca.onID, 
        RestockDate, 
        StockAdded 
        FROM [RSSOSS].[USMC].[TakeOneLoca.onRestock] 
        WHERE ID = @TakeOneRestockID 
 
      --next card 
      FETCH NEXT FROM restockCursor INTO @TakeOneRestockID 
      SET @restockLoop = @@FETCH_STATUS 
     --end restock loop 
     END 
    CLOSE restockCursor 
    DEALLOCATE restockCursor 
 
    --A.er restocks for this loca.on are copied, create an unscheduled event for it 
    --Assign variables for new event 
    DECLARE @eventID uniqueiden..er 
    SET @eventID = newid() 
 
    DECLARE @loca.onName varchar(75) 
    DECLARE @sectorID uniqueiden..er 
    DECLARE @recrui.ngPerson uniqueiden..er 
    DECLARE @orgID int 
    DECLARE @eventDate date.me 
    DECLARE @emptyGUID uniqueiden..er 
     
    SELECT 
    @loca.onName =  
    CASE WHEN TOLoca.on.Loca.onName IS NOT NULL THEN TOLoca.on.Loca.onName ELSE '' END, 
    @SectorID = TOCard.SectorID 
    FROM [RSSOSS].[USMC].[TakeOneLoca.on] TOLoca.on 
    INNER JOIN [RSSOSS].[USMC].[TakeOneCard] TOCard ON TOLoca.on.TakeOneCardID = TOCard.ID  
    WHERE ToLoca.on.ID = @newTakeOneLoca.onID 
 
    --get unscheduled date for October 
    SET @eventDate = ((SELECT CONVERT(varchar(4), @currentFY)) + '-10-01 00:00:00.000') 
    --set the placeholder empty GUID 
    SET @emptyGUID = (select cast(cast(0 as binary) as uniqueiden..er)) 
 
    --use the sectorID to get the recruiterID and OrgID 
    SET @recrui.ngPerson = (SELECT TOP 1 Recrui.ngPersonId FROM [RSSOSS].[USMC].[MapsSectorRecruiter] WHERE SectorID = @SectorID ORDER BY LastUpdateDate)  
     
    IF EXISTS (SELECT ORGANIZATION_ID FROM [MCRISS].[dbo].[Recrui.ng_Person] WHERE rowguid = @recrui.ngPerson) 
    BEGIN   
     SET @orgID = (SELECT ORGANIZATION_ID FROM [MCRISS].[dbo].[Recrui.ng_Person] WHERE rowguid = @recrui.ngPerson) 
 
     --Insert new base event 
     EXEC [RSSOSS].[USMC].[InsertUpdateEvent]  
     @EventId = @eventID,  
     @Organiza.onId = @orgID, 
     @EventSourceId = 22, 
     @EventTypeId = 160, 
     @Loca.on = @loca.onName, 
     @Comments = NULL, 
     @IsComplete = 0, 
     @StartDate = @eventDate, 
     @EndDate = @eventDate, 
     @PrecisionType = 3, 
     @EventTypeOther = NULL, 
     @LastUpdatedBy = @emptyGUID, 
     @Remarks = NULL, 
     @PgSentRefId = NULL 
 
     --insert new event subjects 
     DECLARE @subjectId uniqueiden..er = newid() 
     EXEC [RSSOSS].[USMC].[InsertUpdateEventSubject] 
     @Id = @subjectId, 
     @EventId = @eventID, 
     @SubjectId = @newTakeOneLoca.onID, 
     @SubjectName = @loca.onName 
 
     --insert new event owners 
     INSERT INTO [RSSOSS].[USMC].[EventOwners] 
      ([ID] 
       ,[EventID] 
       ,[OwnerID] 
       ,[CreatorID] 
       ,[LastUpdateDate] 
       ,[LastUpadteUserID])   
      VALUES 
      ( 
        newid() 
        ,@EventId 
        ,@recrui.ngPerson 
        ,@recrui.ngPerson 
       , getdate() 
        ,@emptyGUID 
        ) 
  
     --insert TakeOne event custom atributes 
     EXEC [RSSOSS].[USMC].[InsertUpdateTakeOneEvent] 
     @EventId = @eventID, 
     @NumberAdded = NULL 
    END --END ORG Exists loop 
     
    FETCH NEXT FROM loca.onCursor INTO @TakeOneLoca.onID 
    SET @loca.onLoop = @@FETCH_STATUS 
   --end loca.on loop 
   END 
  CLOSE loca.onCursor 
  DEALLOCATE loca.onCursor 
 
FETCH NEXT FROM takeOneCursor INTO @TakeOneCardID 
SET @cardLoop = @@FETCH_STATUS 
 
--end card loop 
END 
CLOSE takeOneCursor 
DEALLOCATE takeOneCursor 
 
END]]></body>
<schema>A5B5C85F-7BA3-158E-D5A2-943767AC9AE2</schema>
<database>5DE69EDC-7A85-C77A-928E-DB3F41DD97CF</database>
</StoredProcedureSqlServerv2k5>