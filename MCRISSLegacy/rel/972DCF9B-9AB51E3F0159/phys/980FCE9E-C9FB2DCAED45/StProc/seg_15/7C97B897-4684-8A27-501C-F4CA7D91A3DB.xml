<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[InsertUpdateProspectEduca.onFromMcriss]" directorySegmentName="seg_15" id="7C97B897-4684-8A27-501C-F4CA7D91A3DB">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:43:56 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[@MarineCandidateID     int, 
 @OldRecSchoolCode     int, 
 @OldRecEduca.onLevel    varchar(2), 
 @SchoolCode       int, 
 @Educa.onLevel      varchar(2), 
 @SchoolEndDate      date.me, 
 @YearGraduated      int = NULL, 
 @Educa.onCode      char(1), 
 @Veri.ca.on      varchar(10), 
 @ProjectedTier      int, 
 @UserLogin       varchar(50) 
     
AS 
BEGIN 
 
 
 -- STEP 1: Start the transac.on 
 BEGIN TRANSACTION 
 
 DECLARE @LatestLevel varchar(2) 
 DECLARE @LatestCode char(1) 
 DECLARE @nwaID int 
 DECLARE @ssn char(9) 
  
 DECLARE @ProspectID uniqueiden..er 
 
 SELECT Top 1 
  @ProspectID = ProspectId  
 FROM USMC.Prospect 
 WHERE 
  NwaId IN (SELECT rowguid FROM MCRISS.dbo.NWA  
      WHERE  
      MARINE_CANDIDATE_ID = @MarineCandidateID) 
  
 IF @ProspectID IS NOT NULL 
 BEGIN 
  DECLARE @ID uniqueiden..er 
  DECLARE @EduStatusCode int 
   
  SELECT Top 1 @ID = ProspectEduca.onId FROM USMC.ProspectEduca.on 
  WHERE 
   ProspectId = @ProspectID 
   AND SchoolCode = @OldRecSchoolCode 
   AND Educa.onLevel = @OldRecEduca.onLevel 
  ORDER BY LastUpdateDate Desc 
 
  IF @Veri.ca.on = 'VERIFIED' 
  BEGIN 
   SET @EduStatusCode = 1 
  END 
  ELSE 
  BEGIN 
   SET @EduStatusCode = 0 
  END 
 
        
  -- STEP 2 & 3: Issue the data change statement(s), checking @@ERROR a.er each statement 
  IF @ID IS NOT NULL 
  BEGIN 
    
   IF NOT EXISTS(SELECT * FROM [PROSPECTING].[USMC].[Educa.onTier] WHERE Code = @ProjectedTier) 
   BEGIN 
    SELECT Top 1 @ProjectedTier = EduProjectedTierCode FROM [PROSPECTING].USMC.ProspectEduca.on 
    WHERE 
     ProspectId = @ProspectID 
     AND SchoolCode = @OldRecSchoolCode 
     AND Educa.onLevel = @OldRecEduca.onLevel 
    ORDER BY LastUpdateDate Desc 
   END 
 
   -- if already exists.  UPDATE. 
   UPDATE [PROSPECTING].[USMC].[ProspectEduca.on] 
   SET  
     [CompletedDate] = @SchoolEndDate 
     ,[Educa.onLevel] = @Educa.onLevel 
     ,[Educa.onCode] = @Educa.onCode 
     ,[SchoolCode] = @SchoolCode 
     ,[YearGraduated] = @YearGraduated  
     ,[EduStatusCode] = @EduStatusCode 
     ,[EduProjectedTierCode] = @ProjectedTier 
     ,[LastUpdateDate] = GETDATE() 
     ,[LastUpdateBy] = @UserLogin 
   WHERE  
    [ProspectEduca.onId] = @ID 
 
     SELECT @LatestLevel = e.Educa.onLevel, 
     @LatestCode = e.Educa.onCode, 
     @ssn = e.ssn 
     FROM 
     (SELECT TOP 1 pe.Educa.onLevel, pe.Educa.onCode, per.SocialSecurityNumber as ssn 
     FROM Prospec.ng.USMC.ProspectEduca.on pe 
     INNER JOIN Prospec.ng.USMC.Prospect p ON p.prospec.d = pe.prospec.d 
     INNER JOIN Prospec.ng.USMC.Person per ON per.Personid = p.personid 
     WHERE p.ProspectId = @ProspectID ORDER BY CompletedDate DESC) as e 
 
     SELECT @nwaID = n.nwa_ID 
     FROM MCRISS.dbo.NWA n 
     INNER JOIN MCRISS.dbo.PERSON per ON per.person_id = n.MARINE_CANDIDATE_ID 
     WHERE per.SOCIAL_SECURITY_NUMBER = @ssn 
 
     UPDATE MCRISS.dbo.NWA 
     SET EDUCATION_LEVEL = @LatestLevel, 
     EDUCATION_CODE = @LatestCode 
     WHERE 
     NWA_ID = @nwaID 
    
  END 
  ELSE 
  BEGIN 
    
   IF NOT EXISTS(SELECT * FROM [PROSPECTING].[USMC].[Educa.onTier] WHERE Code = @ProjectedTier) 
   BEGIN 
    SET @ProjectedTier = 1 
   END 
 
   -- if does not exist.  INSERT. 
   INSERT INTO [PROSPECTING].[USMC].[ProspectEduca.on] 
           ([ProspectEduca.onId] 
           ,[ProspectId] 
           ,[CompletedDate] 
           ,[Educa.onLevel] 
           ,[Educa.onCode] 
           ,[SchoolCode] 
     ,[YearGraduated] 
           ,[EduStatusCode] 
           ,[EduCreden.alCode] 
           ,[EduProjectedTierCode] 
           ,[Educa.onCompleted] 
           ,[LastYearAtended] 
           ,[LastUpdateDate] 
           ,[LastUpdateBy]) 
     VALUES 
           (NEWID() 
           ,@ProspectID 
           ,@SchoolEndDate 
           ,@Educa.onLevel 
           ,@Educa.onCode 
           ,@SchoolCode 
     ,@YearGraduated 
           ,@EduStatusCode 
           ,0 
           ,@ProjectedTier 
           ,1 
           ,YEAR(@SchoolEndDate) 
           ,GETDATE() 
           ,@UserLogin) 
 
     SELECT @LatestLevel = e.Educa.onLevel, 
     @LatestCode = e.Educa.onCode, 
     @ssn = e.ssn 
     FROM 
     (SELECT TOP 1 pe.Educa.onLevel, pe.Educa.onCode, per.SocialSecurityNumber as ssn 
     FROM Prospec.ng.USMC.ProspectEduca.on pe 
     INNER JOIN Prospec.ng.USMC.Prospect p ON p.prospec.d = pe.prospec.d 
     INNER JOIN Prospec.ng.USMC.Person per ON per.Personid = p.personid 
     WHERE p.ProspectId = @ProspectID ORDER BY CompletedDate DESC) as e 
 
     SELECT @nwaID = n.nwa_ID 
     FROM MCRISS.dbo.NWA n 
     INNER JOIN MCRISS.dbo.PERSON per ON per.person_id = n.MARINE_CANDIDATE_ID 
     WHERE per.SOCIAL_SECURITY_NUMBER = @ssn 
 
     UPDATE MCRISS.dbo.NWA 
     SET EDUCATION_LEVEL = @LatestLevel, 
     EDUCATION_CODE = @LatestCode 
     WHERE 
     NWA_ID = @nwaID 
  END 
 END 
 -- Rollback the transac.on if there were any errors 
 IF @@ERROR <> 0 
 BEGIN 
  -- Rollback the transac.on 
  ROLLBACK TRANSACTION 
 
  -- Raise an error and return 
  RAISERROR ('Error occurred while performing the change.', 16, 1) 
  RETURN 
   
 END 
 
 -- Rollback the transac.on if the number of rows changed does not meet our expecta.on... 
 IF @@ROWCOUNT > 1 
 BEGIN 
  -- Rollback the transac.on 
  ROLLBACK TRANSACTION 
 
  -- Raise an error and return 
  RAISERROR ('An unexpected number of rows were changed.', 16, 1) 
  RETURN 
   
 END 
 
 
--  
-- -- STEP 4: If we reach this point, the commands completed successfully 
-- --         Commit the transac.on.... 
 COMMIT TRANSACTION 
  
END]]></body>
<schema>A5B5C85F-7BA3-158E-D5A2-943767AC9AE2</schema>
<database>5DE69EDC-7A85-C77A-928E-DB3F41DD97CF</database>
</StoredProcedureSqlServerv2k5>