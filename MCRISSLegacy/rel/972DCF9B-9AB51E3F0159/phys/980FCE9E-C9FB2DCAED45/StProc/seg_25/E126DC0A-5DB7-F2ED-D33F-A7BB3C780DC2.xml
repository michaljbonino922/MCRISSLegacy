<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_UpdateProgramAvailability]" directorySegmentName="seg_25" id="E126DC0A-5DB7-F2ED-D33F-A7BB3C780DC2">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[@ProgramID   int,  
 @FiscalYear   int, 
 @Period   int, 
 @OldOrganiza.onID  int, 
 @NewOrganiza.onID  int, 
 @Quan.ty  int, 
 @QtyRemovedShipProg int, 
 @UserLogin  varchar(15) 
AS 
 
SET NOCOUNT ON 
 
DECLARE @ProgramAvailabilityID  int 
DECLARE @ProgCount  int 
 
DECLARE @DBID INT 
DECLARE @DBNAME NVARCHAR(128) 
 
SELECT  
 @DBID = DB_ID(), 
 @DBNAME = DB_NAME() 
 
 
--- GET THE COUNT OF AVAILABLE PROGRAMS 
SELECT  
 @ProgCount = COUNT(PA.PROGRAM_AVAILABILITY_ID)  
FROM  
 PROGRAM_AVAILABILITY PA INNER JOIN PROGRAM_PERIOD PP ON PA.PROGRAM_PERIOD_ID = PP.PROGRAM_PERIOD_ID 
WHERE  
 PA.PROGRAM_ID = @ProgramID AND 
 PP.PERIOD_CODE = @Period AND  
 PP.FY = @FiscalYear AND 
 PA.ASSIGNED_ORGANIZATION_ID = @OldOrganiza.onID AND  
 PA.CONTRACT_ID IS NULL AND 
 NOT EXISTS (SELECT 1 FROM REMOVED_PROGRAMS R WHERE R.PROGRAM_AVAILABILITY_ID = PA.PROGRAM_AVAILABILITY_ID)  
 
 
IF @ProgCount < @Quan.ty  
BEGIN 
 --- RAISE AN ERROR BECAUSE SOME OF THE PROGRAMS ARE ASSIGNED TO CHILD ORGS AND CAN NOT BE REASSIGNED 
 --- UNTIL THE OLD ORG REMOVES THEM FROM THE CHILD ORG  
 --- RAISE AN ERROR AND DO NOT UPDATE THE RECORD  
 RAISERROR ('You have reassigned more programs than are available, please adjust the alloca.ons before saving.', 16, 1, @DBID, @DBNAME) 
 RETURN 
END  
 
 
--- SET THE ROWCOUNT SO THAT WE ONLY RETRIEVE THE QUANTITY WE WANT TO UPDATE 
SET ROWCOUNT @Quan.ty 
 
--- CREATE TEMP TABLE TO STORE PROGRAM AVAILABILITY IDs SO THAT WE 
--- CAN ORDER THE IDs.  SINCE WE CAN'T USE ORDER BY IN A SUBQUERY 
--- WITHOUT USING "TOP" AND WE CAN'T USE "TOP" BECAUSE "TOP" 
--- DOESN'T TAKE VARIABLES SO WE'RE USING "SET ROWCOUNT" INSTEAD 
CREATE TABLE #AVAILABLE_PROGRAMS (PROGRAM_AVAILABILITY_ID INT) 
 
INSERT INTO  
 #AVAILABLE_PROGRAMS  
SELECT 
 PA.PROGRAM_AVAILABILITY_ID  
FROM  
 PROGRAM_AVAILABILITY PA INNER JOIN PROGRAM_PERIOD PP ON PA.PROGRAM_PERIOD_ID = PP.PROGRAM_PERIOD_ID 
WHERE  
 PA.PROGRAM_ID = @ProgramID AND 
 PP.PERIOD_CODE = @Period AND  
 PP.FY = @FiscalYear AND 
 PA.ASSIGNED_ORGANIZATION_ID = @OldOrganiza.onID AND  
 PA.CONTRACT_ID IS NULL AND 
 NOT EXISTS (SELECT 1 FROM REMOVED_PROGRAMS R WHERE R.PROGRAM_AVAILABILITY_ID = PA.PROGRAM_AVAILABILITY_ID) 
ORDER BY 
 PA.PROGRAM_AVAILABILITY_ID DESC 
 
 
--- SET THE ROWCOUNT BACK TO THE DEFAULT 
SET ROWCOUNT 0 
 
 
--- UPDATE THE PROGRAM AVAILABILITY RECORDS 
UPDATE 
 PROGRAM_AVAILABILITY 
SET 
 ASSIGNED_ORGANIZATION_ID = @NewOrganiza.onID, 
 USER_LOGIN = @UserLogin, 
 UPDATE_DATE = GETDATE() 
FROM 
 PROGRAM_AVAILABILITY PA INNER JOIN #AVAILABLE_PROGRAMS AP ON PA.PROGRAM_AVAILABILITY_ID = AP.PROGRAM_AVAILABILITY_ID 
 
  
--- CLEAN UP 
DROP TABLE #AVAILABLE_PROGRAMS  
SET NOCOUNT OFF]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>