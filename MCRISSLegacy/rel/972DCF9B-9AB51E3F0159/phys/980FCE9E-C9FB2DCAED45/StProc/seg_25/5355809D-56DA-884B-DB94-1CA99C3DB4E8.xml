<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_UpdateRecruitersUserList]" directorySegmentName="seg_25" id="5355809D-56DA-884B-DB94-1CA99C3DB4E8">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[@OrgID   int   = NULL, 
 @UserLogin  varchar(15)  = 'sa',  
 @ShowRecordCountMessage bit   = 0  
AS 
 
SET NOCOUNT ON  
 
DECLARE @OrgName   varchar(15) 
DECLARE @RecordsA.ected  int 
 
--- CREATE TEMP TABLES TO HOLD DATA 
CREATE TABLE #ORG_LIST (ORG_ID INT NOT NULL, SHORT_NAME VARCHAR(15) NULL, ORG_TYPE VARCHAR(3) NULL, MCC_CODE VARCHAR(5) NULL) 
 
CREATE TABLE #USER_LIST (PERSON_ID INT NOT NULL, ORGANIZATION_ID INT NOT NULL, MCC_CODE VARCHAR(5) NULL,  
   FIRST_NAME VARCHAR(20) NULL, MIDDLE_NAME VARCHAR(20) NULL, LAST_NAME VARCHAR(20) NOT NULL, VAR_USER_NAME VARCHAR(25) NULL) 
 
--- GET THE ORG DATA 
IF EXISTS (SELECT 1 FROM RECRUITING_ORGANIZATION WHERE ORGANIZATION_ID = @OrgID AND ORGANIZATION_TYPE = 'RS') 
BEGIN  
 --- IF THE ORG ID EXISTS AND BELONGS TO AN RS THEN GET THE RS AND ITS RSSs 
 --- PRINT 'RS' + CHAR(13) + CHAR(13) 
 
 --- GET THE RS ORG NAME  
 SELECT 
  @OrgName = SHORT_NAME 
 FROM   
  RECRUITING_ORGANIZATION 
 WHERE  
  ORGANIZATION_ID = @OrgID 
 
 --- ADD THE RS TO THE ORG TABLE 
 INSERT INTO #ORG_LIST (ORG_ID, SHORT_NAME, ORG_TYPE) 
 VALUES (@OrgID, @OrgName, 'RS') 
 
 --- USE THE EXISTING sp_GetChildOrgs STORED PROCEDURE TO GET THE CHILD RSSs 
 INSERT INTO #ORG_LIST (ORG_ID, SHORT_NAME, ORG_TYPE) 
 EXEC sp_GetChildOrgs @OrgID 
 
 --- GET THE MCC CODE FOR THE ORGANIZATIONS IN THE #ORG_LIST TABLE 
 UPDATE  
  #ORG_LIST 
 SET  
  MCC_CODE = RO.MCC_CODE 
 FROM  
  #ORG_LIST O INNER JOIN RECRUITING_ORGANIZATION RO ON O.ORG_ID = RO.ORGANIZATION_ID 
END 
ELSE 
BEGIN 
 --- OTHERWISE, GET ALL RSs AND RSSs 
 --- PRINT 'NOT RS' + CHAR(13) + CHAR(13) 
 INSERT INTO #ORG_LIST (ORG_ID, SHORT_NAME, ORG_TYPE, MCC_CODE) 
 SELECT  
  ORGANIZATION_ID, SHORT_NAME, ORGANIZATION_TYPE, MCC_CODE 
 FROM  
  RECRUITING_ORGANIZATION 
 WHERE  
  ORGANIZATION_TYPE IN ('RS', 'RSS') AND  
  ISOPEN = 'Y' 
END  
 
--- GET THE USER LIST 
INSERT INTO #USER_LIST  
 (PERSON_ID, ORGANIZATION_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, VAR_USER_NAME, MCC_CODE) 
SELECT  
 RP.RECRUITING_PERSON_ID, RP.ORGANIZATION_ID,  
 P.FIRST_NAME,  
 P.LEGAL_MIDDLE_NAME,  
 P.LAST_NAME,  
 dbo.SetUserName(P.LAST_NAME, P.FIRST_NAME, P.LEGAL_MIDDLE_NAME) AS VAR_USER_NAME,  
 O.MCC_CODE 
FROM  
 RECRUITING_PERSON RP INNER JOIN PERSON P ON  
  (RP.RECRUITING_PERSON_ID = P.PERSON_ID AND  
  RP.TOUR_END_DATE IS NULL) 
 INNER JOIN #ORG_LIST O ON RP.ORGANIZATION_ID = O.ORG_ID 
 
--- STORE ALL RECORDS THAT ALREADY EXIST IN THE USER_LIST TABLE IN THE USER_LIST_DUPLICATES TABLE 
INSERT INTO 
 USER_LIST_DUPLICATES 
SELECT 
 U.VAR_USER_NAME, 
 U.FIRST_NAME, 
 U.MIDDLE_NAME, 
 U.LAST_NAME, 
 U.MCC_CODE, 
 O.ORG_ID, 
 'USER_LIST' 
FROM 
 #USER_LIST U INNER JOIN #ORG_LIST O 
  ON U.ORGANIZATION_ID = O.ORG_ID 
WHERE 
 EXISTS (SELECT 1 FROM USER_LIST L WHERE U.VAR_USER_NAME = L.USER_ID) 
 
--- GET THE ROWCOUNT 
SET @RecordsA.ected = @@ROWCOUNT 
 
IF @ShowRecordCountMessage = 1 
BEGIN 
 --- PRINT A MESSAGE INDICATING HOW MANY RECORDS WERE UPDATED 
 PRINT CONVERT(VARCHAR, @RecordsA.ected) + ' DUPLICATE RECORDS ALREADY IN USER_LIST TABLE' 
END 
 
DELETE FROM 
 #USER_LIST 
WHERE 
 EXISTS (SELECT 1 FROM USER_LIST L WHERE #USER_LIST.VAR_USER_NAME = L.USER_ID) 
 
--- STORE ALL DUPLICATE RECORDS IN THE USER_LIST_DUPLICATE TABLE 
INSERT INTO 
 USER_LIST_DUPLICATES 
SELECT 
 U1.VAR_USER_NAME, 
 U1.FIRST_NAME, 
 U1.MIDDLE_NAME, 
 U1.LAST_NAME, 
 U1.MCC_CODE, 
 O.ORG_ID, 
 'RECRUITER' 
FROM 
 #USER_LIST U1 INNER JOIN #ORG_LIST O 
  ON U1.ORGANIZATION_ID = O.ORG_ID 
WHERE 
 EXISTS (SELECT 1 FROM #USER_LIST U2 INNER JOIN #ORG_LIST O ON U2.ORGANIZATION_ID = O.ORG_ID WHERE U1.VAR_USER_NAME = U2.VAR_USER_NAME AND U1.PERSON_ID != U2.PERSON_ID) 
 
SET @RecordsA.ected = @@ROWCOUNT 
 
IF @ShowRecordCountMessage = 1 
BEGIN 
 --- PRINT A MESSAGE INDICATING HOW MANY RECORDS WERE UPDATED 
 PRINT CONVERT(VARCHAR, @RecordsA.ected) + ' DUPLICATE RECORDS IN THE RECRUITER TABLE' 
END 
 
DELETE FROM 
 #USER_LIST 
WHERE 
 EXISTS (SELECT 1 FROM #USER_LIST U2 INNER JOIN #ORG_LIST O ON U2.ORGANIZATION_ID = O.ORG_ID WHERE #USER_LIST.VAR_USER_NAME = U2.VAR_USER_NAME AND #USER_LIST.PERSON_ID != U2.PERSON_ID) 
 
--- ADD USER RECORDS TO USER LIST TABLE 
INSERT INTO USER_LIST_STAGING (USER_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, MCC_CODE, USER_LOGIN, UPDATE_DATE) 
SELECT  
 U.VAR_USER_NAME,  
 U.FIRST_NAME, 
 U.MIDDLE_NAME, 
 U.LAST_NAME, 
 U.MCC_CODE,  
 @UserLogin AS USER_LOGIN,  
 GETDATE() AS UPDATE_DATE 
FROM  
 #USER_LIST U INNER JOIN #ORG_LIST O ON  
  (U.ORGANIZATION_ID = O.ORG_ID AND  
  NOT EXISTS (SELECT 1 FROM USER_LIST L WHERE L.USER_ID = U.VAR_USER_NAME)) 
 
--- GET THE ROWCOUNT 
SET @RecordsA.ected = @@ROWCOUNT 
 
IF @ShowRecordCountMessage = 1 
BEGIN 
 --- PRINT A MESSAGE INDICATING HOW MANY RECORDS WERE ADDED 
 PRINT CONVERT(VARCHAR, @RecordsA.ected) + ' RECORDS ADDED' 
END 
 
--- CLEAN UP 
DROP TABLE #ORG_LIST 
DROP TABLE #USER_LIST  
 
SET NOCOUNT OFF]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>