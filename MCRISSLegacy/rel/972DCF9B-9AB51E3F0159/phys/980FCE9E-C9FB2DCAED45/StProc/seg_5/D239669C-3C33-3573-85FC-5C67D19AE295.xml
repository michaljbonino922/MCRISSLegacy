<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[GetProspectResultsAdvSearch]" directorySegmentName="seg_5" id="D239669C-3C33-3573-85FC-5C67D19AE295">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:41:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[(  
 @FirstName varchar(20) = null, 
 @LastName varchar(20) = null, 
 @SSN varchar(9) = null, 
 @CreatedFromDate DateTime = null, 
 @CreatedToDate DateTime = null, 
 @ProspectDispos.onId int = null, 
 @PACCreatedFromDate DateTime = null, 
 @PACCreatedToDate DateTime = null,  
 @Ac.vityFromDate DateTime = null, 
 @Ac.vityToDate DateTime = null,  
 @Gradua.onYear int = null, 
 @SchoolIDs xml = null, 
 @ZipCodes xml =null 
) 
 
AS 
 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
 
IF @SchoolIDs IS NOT null 
BEGIN 
 DECLARE @SchoolsTable TABLE (ID uniqueidentifier)   
 INSERT INTO @SchoolsTable (ID)  
 SELECT ParamValues.ID.value('.','VARCHAR(36)') 
 FROM @SchoolIds.nodes('/Schools/id') as ParamValues(ID)  
END 
 
IF @ZipCodes IS NOT null 
BEGIN 
 DECLARE @ZipCodesTable TABLE (ID varchar(5)) 
 INSERT INTO @ZipCodesTable (ID) 
 SELECT ParamValues.ID.value('.','VARCHAR(5)') 
 FROM @ZipCodes.nodes('ZipCodes/id') as ParamValues(ID)  
END 
 
 
SELECT  
 ROW_NUMBER() OVER(Order By LASTNAME, FIRSTNAME),  
 IE.ImportEventId, 
 pr.SchoolId, 
 pr.Gradua.onYear, 
 HS.HIGHSCHOOL_NAME,  
 P.PersonID,  
    Pr.ProspectId, 
 pr.Ac.vity, 
 pr.Ac.vityDate, 
 pr.Source, 
    pr.ASVABDate as ASVABDate, 
    pr.CareerDecision as CareerDesicion, 
    pr.Suppression as Suppression, 
 pdt.ProspectDisposi.onType as Disposi.on, 
 pdt.ProspectDisposi.onId, 
 RO.NAME as RSS, 
 P.FirstName,  
 P.MiddleName,  
 P.LastName, 
 P.SocialSecurityNumber,  
 P.Gender, 
 P.DateOfBirth, 
 PA_PRIMARY.Street1 as PrimaryStreet1, 
 PA_PRIMARY.Street2 as PrimaryStreet2, 
 PA_PRIMARY.City as PrimaryCity, 
 PA_PRIMARY.State as PrimaryState, 
 PA_PRIMARY.ZipCode as PrimaryZipCode, 
 PA_ALTERNATE.Street1 as AlternateStreet1, 
 PA_ALTERNATE.Street2 as AlternateStreet2, 
 PA_ALTERNATE.City as AlternateCity, 
 PA_ALTERNATE.State as AlternateState, 
 PA_ALTERNATE.ZipCode as AlternateZipCode, 
 PP_PRIMARY.PhoneNumber as PrimaryPhoneNumber, 
 PP_ALTERNATE.PhoneNumber as AlternatePhoneNumber, 
 PE_PRIMARY.EmailAddress as PrimaryEmailAddress, 
 PE_ALTERNATE.EmailAddress as AlternateEmailAddress, 
  
 CASE 
  WHEN RP.RANK_CODE IS NOT NULL AND PERSON.LAST_NAME IS NOT NULL AND PERSON.FIRST_NAME IS NOT NULL AND PERSON.LEGAL_MIDDLE_NAME IS NOT NULL  
   THEN LTRIM(RTRIM(RP.RANK_CODE)) + ' ' + LTRIM(RTRIM(PERSON.LAST_NAME)) + ' ' + LTRIM(RTRIM(PERSON.FIRST_NAME)) + ' ' + LTRIM(RTRIM(PERSON.LEGAL_MIDDLE_NAME)) 
  WHEN RP.RANK_CODE IS NOT NULL AND PERSON.LAST_NAME IS NOT NULL AND PERSON.FIRST_NAME IS NOT NULL AND PERSON.LEGAL_MIDDLE_NAME IS NULL  
   THEN LTRIM(RTRIM(RP.RANK_CODE)) + ' ' + LTRIM(RTRIM(PERSON.LAST_NAME)) + ' ' + LTRIM(RTRIM(PERSON.FIRST_NAME))  
  WHEN RP.RANK_CODE IS NOT NULL AND PERSON.LAST_NAME IS NOT NULL AND PERSON.FIRST_NAME IS NULL  
   THEN LTRIM(RTRIM(RP.RANK_CODE)) + ' ' + LTRIM(RTRIM(PERSON.LAST_NAME))  
  ELSE LTRIM(RTRIM(RP.RANK_CODE)) 
 END AS Recruiter, 
  
 MS.SectorDesignator AS Sector 
 
    
FROM  
 
 [usmc].[ImportEvent] IE  
 INNER JOIN [usmc].[ImportPerson] IP on (IE.importeven.d = IP.importeven.d) 
 INNER JOIN [usmc].[Person] P on (IP.personid = P.personid) 
 INNER JOIN [usmc].[Prospect] pr on (p.PersonID = pr.PersonID)  
 INNER JOIN [usmc].[ProspectDisposi.on] pdt on (pr.ProspectDisposi.onId = pdt.ProspectDisposi.onId) 
 LEFT OUTER JOIN [MCRISS-VDB01\PROCESSING].[mcriss].[dbo].[RECRUITING_PERSON] RP on (Pr.Recrui.ngPersonId = RP.rowguid)--RECRUITING_PERSON_ID  
 LEFT OUTER JOIN [MCRISS-VDB01\PROCESSING].[mcriss].[dbo].[PERSON] PERSON on (RP.RECRUITING_PERSON_ID=PERSON.PERSON_ID) 
 LEFT OUTER JOIN [MCRISS-VDB01\PROCESSING].[mcriss].[dbo].[HIGH_SCHOOL] HS on (pr.SchoolId=HS.rowguid)  
 LEFT OUTER JOIN [RSSOSS].[USMC].[MapsSectorRecruiter] MSR on (pr.Recrui.ngPersonId=MSR.Recrui.ngPersonId) 
 LEFT OUTER JOIN [RSSOSS].[USMC].[MapsSector] MS on(MSR.SectorId=MS.SectorID) 
 LEFT OUTER JOIN [MCRISS-VDB01\PROCESSING].[mcriss].[dbo].[RECRUITING_ORGANIZATION] RO on (Pr.Recrui.ngOrganiza.onId = RO.rowguid)--ORGANIZATION_ID  
 LEFT OUTER JOIN [USMC].[PersonAddress] PA_PRIMARY ON ((PA_PRIMARY.PersonId = P.PersonId) AND (PA_PRIMARY.PersonAddressTypeId = 1)) 
 LEFT OUTER JOIN [USMC].[PersonAddress] PA_ALTERNATE ON ((PA_ALTERNATE.PersonId = P.PersonId) AND (PA_ALTERNATE.PersonAddressTypeId = 2)) 
 LEFT OUTER JOIN [USMC].[PersonPhone] PP_PRIMARY ON ((PP_PRIMARY.PersonId = P.PersonId) AND (PP_PRIMARY.PersonPhoneTypeId = 1)) 
 LEFT OUTER JOIN [USMC].[PersonPhone] PP_ALTERNATE ON ((PP_ALTERNATE.PersonId = P.PersonId) AND (PP_ALTERNATE.PersonPhoneTypeId = 2)) 
 LEFT OUTER JOIN [USMC].[PersonEmail] PE_PRIMARY ON ((PE_PRIMARY.PersonId = P.PersonId) AND (PE_PRIMARY.PersonEmailTypeId = 1)) 
 LEFT OUTER JOIN [USMC].[PersonEmail] PE_ALTERNATE ON ((PE_ALTERNATE.PersonId = P.PersonId) AND (PE_ALTERNATE.PersonEmailTypeId = 2)) 
WHERE  
 IE.ImportEventStatusTypeId =3  
 -- Prospect Search 
 AND 
 (@FirstName is null OR P.FirstName like @FirstName)  
 AND 
 (@LastName is null OR P.LastName like @LastName)  
 AND 
 (@SSN is null OR P.SocialSecurityNumber like @SSN)  
  
 -- Prospect Board  
 AND 
 (@ProspectDispos.onId is null OR pdt.ProspectDisposi.onId = @ProspectDispos.onId)  
 AND 
 (@PACCreatedFromDate is null OR pr.PACCreateDate >= @PACCreatedFromDate) 
 AND 
 (@PACCreatedToDate is null OR pr.PACCreateDate <= @PACCreatedToDate) 
 --HS List Folders 
 AND 
 (@SchoolIDs is null OR pr.SchoolId IN  
  ( 
   SELECT * FROM @SchoolsTable  
  ) 
 )   
 AND 
 (@ZipCodes is null OR PA_PRIMARY.ZipCode IN  
  ( 
   SELECT * FROM @ZipCodesTable 
  )  
 )  
 AND 
 (@Gradua.onYear is null OR  pr.Gradua.onYear=@Gradua.onYear) 
 --Recruiter Ac.vity  
 AND 
 (@Ac.vityFromDate is null OR pr.Ac.vityDate >= @Ac.vityFromDate) 
 AND 
 (@Ac.vityToDate is null OR pr.Ac.vityDate <= @Ac.vityToDate) 
  
 AND 
 (@CreatedFromDate is null OR pr.CreatedDate >= @CreatedFromDate) 
 AND 
 (@CreatedToDate is null OR pr.CreatedDate <= @CreatedToDate)]]></body>
<schema>A5B5C85F-7BA3-158E-D5A2-943767AC9AE2</schema>
<database>7220F1F8-DA6B-58D6-61AE-B77688E1C655</database>
</StoredProcedureSqlServerv2k5>