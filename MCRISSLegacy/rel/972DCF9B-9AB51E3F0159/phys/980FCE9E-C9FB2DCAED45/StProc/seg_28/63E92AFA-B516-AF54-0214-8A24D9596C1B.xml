<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[usp_what_.les_to_restore]" directorySegmentName="seg_28" id="63E92AFA-B516-AF54-0214-8A24D9596C1B">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[as 
-- 
-- 
-- This stored procedure was writen by Greg Larsen for Washington State Department of Health. 
-- Date: 02/28/2002 
-- 
-- Descrip.on: 
--  This stored procedure generates a list of .les that need to be restored 
--  should the server need to be rebuild.  The list only contains a list of database 
--  backup .les. 
-- 
-- Declare variables used in SP 
declare @cmd nvarchar (1000)  
declare @cmd1 nvarchar (1000)  
declare @db nvarchar(128) 
declare @.lename nvarchar(128) 
declare @cnt int 
declare @num_processed int 
declare @name nvarchar(128)  
declare @physical_device_name nvarchar(128)  
declare @backup_start_date date.me 
declare @type char(1)  
-- Sec.on A -------------------------------------------- 
-- Turn o. the row number message 
set nocount on 
-- De.ne cursor to hold all the di.erent databases for the restore script will be built 
declare db cursor for  
select name from master..sysdatabases 
where name not in ('tempdb') 
-- Create a global temporary table that will hold the name of the backup, the database name, 
-- and the type of database backup. 
create table ##backupnames ( 
name nvarchar(100),  
database_name nvarchar(100),  
type char(1) ) 
-- Open cursor containing list of database names. 
open db 
fetch next from db into @db 
-- Process un.l no more databases are le. 
WHILE @@FETCH_STATUS = 0 
BEGIN 
-- Subsec.on 1A ---------------------------------------------- 
-- ini.alize the physical device name 
 set @physical_device_name = "" 
-- get the name of the last full database backup 
 select @physical_device_name = physical_device_name , @backup_start_date = backup_start_date 
 from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id 
      join msdb..backupmediafamily c on a.media_set_id = c.media_set_id  
       where type='d' and backup_start_date =  
        (select top 1 backup_start_date from msdb..backupset  
             where @db = database_name and type = 'd' 
              order by backup_start_date desc)   
-- Did a full database backup name get found  
if @physical_device_name <> ""  
begin 
-- Build command to place a record in table that holds backup names 
  select @cmd = 'insert into ##backupnames values (' + char(39) +  
              @physical_device_name + char(39) + ',' + char(39) + @db + char(39) + "," + 
              char(39) + 'd' + char(39)+ ')'      
-- Execute command to place a record in table that holds backup names       
  exec sp_executesql @cmd 
end 
-- Subsec.on 1B ---------------------------------------------- 
-- Reset the physical device name  
set @physical_device_name = "" 
-- Find the last di.eren.al database backup 
 select @physical_device_name = physical_device_name, @backup_start_date = backup_start_date  
 from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id 
      join msdb..backupmediafamily c on a.media_set_id = c.media_set_id  
       where type='i' and backup_start_date =  
        (select top 1 backup_start_date from msdb..backupset  
             where @db = database_name and type = 'I' and backup_start_date > @backup_start_date  
              order by backup_start_date desc)  
-- Did a di.eren.al backup name get found 
if @physical_device_name <> ""  
begin 
-- Build command to place a record in table that holds backup names 
  select @cmd = 'insert into ##backupnames values (' + char(39) +  
              @physical_device_name + char(39) + ',' + char(39) + @db + char(39) + "," + 
              char(39) + 'i' + char(39)+ ')'      
-- Execute command to place a record in table that holds backup names         
  exec sp_executesql @cmd 
end 
-- Subsec.on 1B ---------------------------------------------- 
-- Build command to place records in table to hold backup names for all  
-- transac.on log backups from the last database backup 
set @CMD = "insert into ##backupnames select physical_device_name," + char(39) + @db + char(39) +  
           "," + char(39) + "l" + char(39) +    
 "from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id " +  
 "join msdb..backupmediafamily c on a.media_set_id = c.media_set_id " +   
       "where type=" + char(39) + "l" + char(39) + "and backup_start_date >  @backup_start_dat and" +  
char(39) + @db + char(39) + " = database_name" 
-- Execute command to place records in table to hold backup names  
-- for all transac.on log backups from the last database backup 
exec sp_executesql @cmd,@params=N'@backup_start_dat date.me', @backup_start_dat = @backup_start_date 
-- get next database to process  
fetch next from db into @db 
end 
-- close and deallocate database list cursor 
close db 
deallocate db 
-- Sec.on B ------------------------------------------------------- 
-- de.ne cursor for all database and log backups  
declare backup_name cursor for  
   select name,type from ##backupnames  
-- Open cursor containing list of database backups for speci.c database being processed   
open backup_name 
-- Get .rst database backup for speci.c database being processed 
fetch next from backup_name into @physical_device_name, @type 
-- Set counter to track the number of backups processed 
set @NUM_PROCESSED = 0 
-- Process un.l no more database backups exist for speci.c database being processed 
WHILE @@FETCH_STATUS = 0 
BEGIN 
-- print .le name to restore 
   print @physical_device_name 
-- Get next database backup to process 
   fetch next from backup_name into @physical_device_name, @type 
end  
-- Close and deallocate database backup name cursor for current database being processed 
close backup_name 
deallocate backup_name 
 
-- Drop global temporary table  
drop table ##backupnames]]></body>
<schema>DD6CF638-A2EB-2E1B-FF13-422CA718DE2D</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>