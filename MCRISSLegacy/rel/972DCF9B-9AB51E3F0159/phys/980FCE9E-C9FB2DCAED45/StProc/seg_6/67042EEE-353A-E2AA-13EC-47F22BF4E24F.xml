<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[GetMIRSImportView]" directorySegmentName="seg_6" id="67042EEE-353A-E2AA-13EC-47F22BF4E24F">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[( 
 @Star.ngRow int, 
 @PageSize int, 
 @SSN char(9) 
) 
AS 
 
IF (@SSN IS NULL) 
BEGIN 
 SELECT 
  NULL AS MIRS_IMPORT_ID,  
  NULL AS PERSON_ID,  
  NULL AS NWA_ID,  
  NULL AS CONTRACT_ID,  
  NULL AS SHIP_ID,  
  NULL AS STATUS_TYPE,  
  NULL AS STATUS_CODE,  
  NULL AS DISPOSITION_CODE,  
  NULL AS FULL_NAME,  
  NULL AS [FILE_NAME],  
  NULL AS SSN,  
  NULL AS WORK_ID,  
  NULL AS PENDING_EDUCATION,  
  NULL AS EDUCATION_LEVEL,  
  NULL AS PENDING_WAIVER,  
  NULL AS PENDING_DEPENDENT,  
  NULL AS IST_BLOCK_INCOMPLETE,  
  NULL AS RESERVIST_WITHOUT_QSN 
 WHERE 1 = 2 
END 
ELSE 
BEGIN 
 -- from sp_GetMIRSImportView 
 
 --This will return one more row that they asked for so that they know if there is another page of data. 
 DECLARE @LastRow int 
 SET @LastRow = @Star.ngRow + @PageSize; 
 
 --- CREATE TEMP TABLE TO HOLD DATA 
 CREATE TABLE #MIRS_IMPORT_VIEW  
  (RowNumber INT, MIRS_IMPORT_ID INT NULL, PERSON_ID INT NULL, NWA_ID INT NULL, CONTRACT_ID INT NULL, SHIP_ID INT NULL,   
  STATUS_TYPE CHAR(1) NOT NULL DEFAULT SPACE(0), STATUS_CODE CHAR(1) NOT NULL DEFAULT SPACE(0), DISPOSITION_CODE CHAR(1) NOT NULL DEFAULT SPACE(0),  
  FULL_NAME VARCHAR(60) NULL, [FILE_NAME] VARCHAR(40) NULL, SSN CHAR(9), WORK_ID VARCHAR(5),  
  REPROCESS CHAR(1) NULL, PENDING_EDUCATION CHAR(1) NOT NULL DEFAULT SPACE(0),  
  EDUCATION_LEVEL CHAR(1) NOT NULL DEFAULT SPACE(0), PENDING_WAIVER CHAR(1) NOT NULL DEFAULT SPACE(0),  
  PENDING_DEPENDENT CHAR(1) NOT NULL DEFAULT SPACE(0),  IST_BLOCK_INCOMPLETE CHAR(1) NOT NULL DEFAULT SPACE(0),  
  RESERVIST_WITHOUT_QSN CHAR(1) NOT NULL DEFAULT SPACE(0)) 
 
 --- GET MIRS IMPORT DATA 
 INSERT INTO #MIRS_IMPORT_VIEW (RowNumber, MIRS_IMPORT_ID, PERSON_ID, NWA_ID, CONTRACT_ID, SHIP_ID, FULL_NAME, [FILE_NAME], SSN, WORK_ID, REPROCESS)  
 SELECT  
  ROW_NUMBER() OVER (ORDER BY P.LAST_NAME, P.FIRST_NAME, P.LEGAL_MIDDLE_NAME), 
  L.MIRS_IMPORT_ID,  
  COALESCE(P.PERSON_ID, 0) AS PERSON_ID,  
  COALESCE(N.NWA_ID, 0) AS NWA_ID,  
  COALESCE(C.CONTRACT_ID, 0) AS CONTRACT_ID,  
  COALESCE(S.SHIP_ID, 0) AS SHIP_ID,  
  LTRIM(RTRIM(P.LAST_NAME)) + ', ' + LTRIM(RTRIM(P.FIRST_NAME)) + SPACE(1) + COALESCE(LEFT(P.LEGAL_MIDDLE_NAME, 1), SPACE(0)) AS FULL_NAME,  
  L.[FILE_NAME], L.SSN, L.MIRS_TRANSACTION AS WORK_ID, 
  CASE  
   WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG EL ON  
      (E.ERROR_LOG_ID = EL.ERROR_LOG_ID AND 
      EL.ERROR_CD != 38 AND 
      EL.STATUS = 'UNRESOLVED' AND  
      EL.REPROCESS = 'Y') 
     WHERE 
      E.MIRS_IMPORT_ID = L.MIRS_IMPORT_ID) THEN 'Y' 
    ELSE 'N' 
  END AS REPROCESS 
     
 FROM 
  MCRISS_ERROR.dbo.MIRS_IMPORT_LOG L WITH (NOLOCK) 
  LEFT OUTER JOIN PERSON P ON L.SSN = P.SOCIAL_SECURITY_NUMBER 
  LEFT OUTER JOIN NWA N ON  
   (P.PERSON_ID = N.MARINE_CANDIDATE_ID AND 
   N.NWA_ID = dbo.GetMaxNWAID(N.MARINE_CANDIDATE_ID)) 
  LEFT OUTER JOIN CONTRACT C ON N.NWA_ID = C.NWA_ID 
  LEFT OUTER JOIN SHIPPER S ON C.CONTRACT_ID = S.CONTRACT_ID 
 WHERE 
  @SSN IS NULL OR (@SSN IS NOT NULL AND L.SSN = @SSN) 
 
--- GET MIRS IMPORT DATA 
INSERT INTO #MIRS_IMPORT_VIEW (RowNumber, MIRS_IMPORT_ID, PERSON_ID, NWA_ID, CONTRACT_ID, SHIP_ID, FULL_NAME, [FILE_NAME], SSN, WORK_ID, REPROCESS)  
SELECT  
 ROW_NUMBER() OVER (ORDER BY P.LAST_NAME, P.FIRST_NAME, P.LEGAL_MIDDLE_NAME), 
 L.MIRS_IMPORT_ID,  
 COALESCE(P.PERSON_ID, 0) AS PERSON_ID,  
 COALESCE(N.NWA_ID, 0) AS NWA_ID,  
 COALESCE(C.CONTRACT_ID, 0) AS CONTRACT_ID,  
 COALESCE(S.SHIP_ID, 0) AS SHIP_ID,  
 LTRIM(RTRIM(P.LAST_NAME)) + ', ' + LTRIM(RTRIM(P.FIRST_NAME)) + SPACE(1) + COALESCE(LEFT(P.LEGAL_MIDDLE_NAME, 1), SPACE(0)) AS FULL_NAME,  
 L.[FILE_NAME], L.SSN, L.MIRS_TRANSACTION AS WORK_ID, 
 CASE  
  WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG EL ON  
     (E.ERROR_LOG_ID = EL.ERROR_LOG_ID AND 
     EL.ERROR_CD != 38 AND 
     EL.STATUS = 'UNRESOLVED' AND  
     EL.REPROCESS = 'Y') 
    WHERE 
     E.MIRS_IMPORT_ID = L.MIRS_IMPORT_ID) THEN 'Y' 
   ELSE 'N' 
 END AS REPROCESS 
    
FROM 
 MCRISS_ERROR.dbo.MIRS_IMPORT_LOG L WITH (NOLOCK) 
 LEFT OUTER JOIN PERSON P ON L.SSN = P.SOCIAL_SECURITY_NUMBER 
 LEFT OUTER JOIN NWA N ON  
  (P.PERSON_ID = N.MARINE_CANDIDATE_ID AND 
  N.NWA_ID = dbo.GetMaxNWAID(N.MARINE_CANDIDATE_ID)) 
 LEFT OUTER JOIN CONTRACT C ON N.NWA_ID = C.NWA_ID 
 LEFT OUTER JOIN SHIPPER S ON C.CONTRACT_ID = S.CONTRACT_ID 
WHERE 
 @SSN IS NULL OR (@SSN IS NOT NULL AND L.SSN = @SSN) 
 
 --- GET STATUS/DISPOSITION DATA 
 UPDATE 
  #MIRS_IMPORT_VIEW  
 SET 
  STATUS_TYPE   = CS.STATUS_TYPE,  
  STATUS_CODE   = CS.STATUS_CODE,  
  DISPOSITION_CODE  = CS.DISPOSITION_CODE 
 FROM 
  #MIRS_IMPORT_VIEW V INNER JOIN CANDIDATE_STATUS CS ON  
   (V.NWA_ID = CS.NWA_ID AND 
   CS.CANDIDATE_STATUS_ID = dbo.GetMaxStatusID(CS.NWA_ID)) 
 
 --- GET MIRS REPROCESSOR/ERROR DATA 
 UPDATE 
  #MIRS_IMPORT_VIEW  
 SET 
  PENDING_EDUCATION = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD = 66 AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END,    
  EDUCATION_LEVEL = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD IN (67, 68) AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END,   
  PENDING_WAIVER = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD = 69 AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END,    
  PENDING_DEPENDENT = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD = 70 AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END,    
  IST_BLOCK_INCOMPLETE = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD = 73 AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END,   
  RESERVIST_WITHOUT_QSN = CASE  
     WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
       (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
       L.ERROR_CD = 74 AND 
       L.STATUS = 'UNRESOLVED' AND 
       L.REPROCESS = 'Y' AND 
       E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
      THEN 'Y' 
     ELSE SPACE(0) 
     END  
 FROM 
  #MIRS_IMPORT_VIEW V 
 WHERE 
  REPROCESS = 'Y' 
   
--- GET MIRS REPROCESSOR/ERROR DATA 
UPDATE 
 #MIRS_IMPORT_VIEW  
SET 
 PENDING_EDUCATION = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD = 66 AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END,    
 EDUCATION_LEVEL = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD IN (67, 68) AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END,   
 PENDING_WAIVER = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD = 69 AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END,    
 PENDING_DEPENDENT = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD = 70 AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END,    
 IST_BLOCK_INCOMPLETE = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD = 73 AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END,   
 RESERVIST_WITHOUT_QSN = CASE  
    WHEN EXISTS (SELECT 1 FROM MCRISS_ERROR.dbo.MIRS_IMPORT_ERROR E INNER JOIN MCRISS_ERROR.dbo.ERROR_LOG L ON 
      (E.ERROR_LOG_ID = L.ERROR_LOG_ID AND 
      L.ERROR_CD = 74 AND 
      L.STATUS = 'UNRESOLVED' AND 
      L.REPROCESS = 'Y' AND 
      E.MIRS_IMPORT_ID = V.MIRS_IMPORT_ID)) 
     THEN 'Y' 
    ELSE SPACE(0) 
    END  
FROM 
 #MIRS_IMPORT_VIEW V 
WHERE 
 REPROCESS = 'Y' 
  
 --- RETURN DATA 
 SELECT 
  MIRS_IMPORT_ID, PERSON_ID, NWA_ID, CONTRACT_ID,  
  SHIP_ID, STATUS_TYPE, STATUS_CODE, DISPOSITION_CODE,  
  FULL_NAME, [FILE_NAME], SSN, WORK_ID,  
  PENDING_EDUCATION, EDUCATION_LEVEL, PENDING_WAIVER,  
  PENDING_DEPENDENT, IST_BLOCK_INCOMPLETE, RESERVIST_WITHOUT_QSN 
 FROM 
  #MIRS_IMPORT_VIEW  
 WHERE RowNumber >=@Star.ngRow AND RowNumber <=@LastRow 
 ORDER BY RowNumber  
 
 SELECT Count(*) AS [TOTAL] FROM #MIRS_IMPORT_VIEW 
 
 --- CLEAN UP 
 DROP TABLE #MIRS_IMPORT_VIEW  
END]]></body>
<schema>E9C4E37D-78A2-31F9-D580-7C2848ACFCB7</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>