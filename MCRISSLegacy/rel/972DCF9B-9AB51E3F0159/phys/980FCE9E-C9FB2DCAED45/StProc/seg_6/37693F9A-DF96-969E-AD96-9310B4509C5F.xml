<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[GetMissionBoardDetailPlanDataByOrgFY]" directorySegmentName="seg_6" id="37693F9A-DF96-969E-AD96-9310B4509C5F">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacy</ownerDesignName>
<body><![CDATA[@Organiza.onID     int,  
 @FiscalYear   int 
  
AS 
SET NOCOUNT ON 
DECLARE @Organiza.onType varchar(3) 
DECLARE @ChildOrgType varchar(3) 
 
 
SELECT  @Organiza.onType = Organiza.on_Type from recrui.ng_organiza.on RO 
        where RO.Organiza.on_ID = @Organiza.onID 
  
 
 
SET @ChildOrgType = CASE @Organiza.onType 
   WHEN 'H' THEN 'R' 
   WHEN 'R' THEN 'D' 
   WHEN 'D' THEN 'RS' 
   WHEN 'RS' THEN 'OSS' 
   ELSE 'OSS' 
   END 
 
 
CREATE TABLE #ORG  
( 
ORG_ID INT,  
SHORT_NAME varchar(15), 
-- the sp GetChildOrg does not return the name column 
--NAME varchar(45),  
ORG_TYPE varchar(3) DEFAULT 'D' 
) 
 
 
-- need to verify if the case for child organiza.on id is needed 
/*IF @Organiza.onType IN ('H', 'R', 'D', 'RS') 
BEGIN 
 --- GET CHILD ORGS 
 --INSERT INTO #ORG 
 --EXEC sp_GetChildOrgs @Organiza.onID, @ChildOrgType 
 
END */ 
 
-- .x this if condi.on based on the above scenerio for non-oss organiza.ons 
--IF @Organiza.onType = 'OSS' 
BEGIN 
 --- INSERT ONLY THE ORG ID 
 INSERT INTO #ORG (ORG_ID) VALUES (@Organiza.onID) 
END 
 
 
  
--- RETRIEVE THE MISSION PLAN DATA FOR PLC 
--- SHIP MISSION 
 
-- if the plan for a .scal year and organiza.on exists in the ship_mission_table then return the plan 
--  otherwise return zeros for all component_codes for that plan for all mission years 
 
IF EXISTS  ( 
 
SELECT '1'  
FROM  
 RECRUITING_ORGANIZATION RO INNER JOIN #ORG O ON RO.ORGANIZATION_ID = O.ORG_ID 
 INNER JOIN OFFICER_SHIP_MISSION_PLAN OMP ON 
  (RO.ORGANIZATION_ID = OMP.ORGANIZATION_ID AND 
  OMP.FISCAL_YEAR = @FiscalYear AND 
  OMP.OFFICER_SOURCE_CODE = 'PLC') 
WHERE 
  -- mission years can be only three consecu.ve years from the .scal year 
     OMP.GRAD_YEAR BETWEEN @FiscalYear AND (@FiscalYear + 3))  
BEGIN 
SELECT  
   
 'PLC' AS OFFICER_SOURCE_CODE,OMP.GRAD_YEAR AS MISSION_YEAR, 
 
    CASE  
  WHEN OMP.GRAD_YEAR = @FiscalYear + 1  Then  1  
  WHEN OMP.GRAD_YEAR = @FiscalYear + 2  Then  2  
  WHEN OMP.GRAD_YEAR = @FiscalYear + 3  Then  3 
  --there should be only three consecu.ve mission years for a .scal years.  
  -- all other records should be ignored and they are ignored in the where clause below 
 END AS DATA_TABLE_NUM, 
  
 COALESCE(OMP.NFO_MISSION, 0) AS NUM_NFO,  
 COALESCE(OMP.NAVAL_AIR_MISSION, 0) AS NUM_AIR,  
 COALESCE(OMP.GROUND_MISSION, 0) AS NUM_GROUND, 
 COALESCE(OMP.PLCR_GROUND_MISSION, 0) AS NUM_PLCR_GROUND, 
 0 AS NUM_OCCR_GROUND,  
 COALESCE(OMP.FEMALE_MISSION, 0) AS NUM_WOMEN,  
 
 --not use data_table_num as it may go away a.er code review. Also need to somehow combine this case statement  
 --with the above case statement for performance reasons. 
 CASE  
  WHEN OMP.GRAD_YEAR = @FiscalYear + 1  then   IsNull(OMP.LAW1_MISSION ,0) 
 
     WHEN OMP.GRAD_YEAR = @FiscalYear + 2  then (select OMP2.LAW2_MISSION from OFFICER_SHIP_MISSION_PLAN OMP2  
             where OMP2.ORGANIZATION_ID = @Organiza.onID  
             and OMP2.FISCAL_YEAR = @FiscalYear 
             and OMP2.GRAD_YEAR = @FiscalYear + 1) 
  WHEN OMP.GRAD_YEAR = @FiscalYear + 3  then (select OMP3.LAW3_MISSION from OFFICER_SHIP_MISSION_PLAN OMP3  
             where OMP3.ORGANIZATION_ID = @Organiza.onID  
             and OMP3.FISCAL_YEAR = @FiscalYear 
             and OMP3.GRAD_YEAR = @FiscalYear + 1) 
      
 ELSE 0  --there should be no law 4 
 END AS NUM_LAW, 
   
 COALESCE(OMP.BLACK_MISSION, 0) AS NUM_BLACK,  
 COALESCE(OMP.HISPANIC_MISSION, 0) AS NUM_HISPANIC,  
 COALESCE(OMP.OTHER_MISSION, 0) AS NUM_OTHER 
  
FROM  
 RECRUITING_ORGANIZATION RO INNER JOIN #ORG O ON RO.ORGANIZATION_ID = O.ORG_ID 
 INNER JOIN OFFICER_SHIP_MISSION_PLAN OMP ON 
  (RO.ORGANIZATION_ID = OMP.ORGANIZATION_ID AND 
  OMP.FISCAL_YEAR = @FiscalYear AND 
  OMP.OFFICER_SOURCE_CODE = 'PLC') 
WHERE 
  -- mission years can be only three consecu.ve years from the .scal year 
     OMP.GRAD_YEAR BETWEEN @FiscalYear AND (@FiscalYear + 3) 
ORDER BY 
 OMP.GRAD_YEAR 
END 
-- there is no plan  
ELSE 
BEGIN 
 
SELECT  
 'PLC' AS OFFICER_SOURCE_CODE, OC.CLASS_NUMBER,  
 CASE  
  WHEN TRAINING_TYPE_CODE = 'PLCJR' THEN   @FiscalYear+ 3  
  WHEN TRAINING_TYPE_CODE = 'PLCSR' THEN    @FiscalYear+ 2  
  WHEN TRAINING_TYPE_CODE = 'PLCCOMB' THEN  @FiscalYear +1  
  
    END AS MISSION_YEAR,  
 CASE  
  WHEN TRAINING_TYPE_CODE = 'PLCJR' THEN  3 
  WHEN TRAINING_TYPE_CODE = 'PLCSR' THEN  2 
  WHEN TRAINING_TYPE_CODE = 'PLCCOMB' THEN 1 
    END AS DATA_TABLE_NUM, 
  
 0 AS NUM_NFO, 0 AS NUM_AIR, 0 AS NUM_GROUND, 0 AS NUM_PLCR_GROUND, 0 AS NUM_OCCR_GROUND,  0 AS NUM_WOMEN,  
 0 AS NUM_LAW,  0 AS NUM_BLACK, 0 AS NUM_HISPANIC,  0 AS NUM_OTHER 
  
 FROM  OCS_CLASS OC WHERE FISCAL_YEAR  = @FiscalYear and  training_type_code  <> 'OCC' 
  
END 
----------------------------------------------------------------------------------------------------------------  
--- RETRIEVE THE MISSION PLAN DATA FOR OCC 
--- SHIP MISSION 
 
-- if the plan for a .scal year and organiza.on exists in the ship_mission_table then return the plan 
--  otherwise return zeros for all component_codes for that plan for all mission years 
------------------------------------------------------------------------------------------------------------------ 
IF EXISTS (SELECT '1' 
 FROM  
  RECRUITING_ORGANIZATION RO INNER JOIN #ORG O ON RO.ORGANIZATION_ID = O.ORG_ID 
  INNER JOIN OFFICER_SHIP_MISSION_PLAN OMP ON 
   (RO.ORGANIZATION_ID = OMP.ORGANIZATION_ID AND 
   OMP.OFFICER_SOURCE_CODE = 'OCC') 
  INNER JOIN OCS_CLASS OC ON OC.CLASS_NUMBER = OMP.OCC_CLASS_NUMBER AND OC.FISCAL_YEAR = @FiscalYear ) 
 
 BEGIN 
SELECT  
 'OCC' AS OFFICER_SOURCE_CODE, OMP.OCC_CLASS_NUMBER, 
 -- In a given .scal year there will be only three semesters fall, winter and summer 
 -- for OCC source code the ship mission plan has a .scal year or 0 therefore 
 -- the .scal year is retreived from ocs_class table 
/*    CASE    
   WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=1 and datepart(mm, OC.CLASS_BEGIN_DATE) <=4 then  2 --  winter 
         WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=5 and datepart(mm, OC.CLASS_BEGIN_DATE) <=8 then  3 --  summer  
   WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=9 and datepart(mm, OC.CLASS_BEGIN_DATE) <=12 then 1 --  fall 
 --ELSE 0 
 END  AS DATA_TABLE_NUM, */ 
 -- this is a temporory .x as the class_begin_date is null. In order for a class to be fall, winter or spring 
 --it must have a class_begin_date. The analyst are working on ge.ng this corrected. Once .xed the  case statement 
    --above should be used for data table num 
 CASE 
  WHEN OC.CLASS_NUMBER = (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC') THEN 1 
  WHEN OC.CLASS_NUMBER = ( SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR = @FiscalYear and TRAINING_TYPE_CODE = 'OCC') THEN 3 
  WHEN (OC.CLASS_NUMBER > (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC')  
    AND OC.CLASS_NUMBER < (SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR = @FiscalYear and TRAINING_TYPE_CODE = 'OCC')) THEN 2 
 -- ELSE there should be no else 
 END AS DATA_TABLE_NUM, 
 
 COALESCE(OMP.NFO_MISSION, 0) AS NUM_NFO,  
 COALESCE(OMP.NAVAL_AIR_MISSION, 0) AS NUM_AIR,  
 COALESCE(OMP.GROUND_MISSION, 0) AS NUM_GROUND, 
 0 AS NUM_PLCR_GROUND, 
 COALESCE(OMP.OCCR_GROUND_MISSION, 0) AS NUM_OCCR_GROUND,  
 COALESCE(OMP.FEMALE_MISSION, 0) AS NUM_WOMEN,  
 
 --not use data_table_num as it  may go away a.er code review. Also need to somehow combine this case statement  
 --with the above case statement for performance reasons. 
 /*CASE    
   WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=1 and datepart(mm, OC.CLASS_BEGIN_DATE) <=4 then  IsNull(OMP.LAW2_MISSION ,0) --winter 
         WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=5 and datepart(mm, OC.CLASS_BEGIN_DATE) <=8 then  IsNull(OMP.LAW3_MISSION ,0) --summer 
   WHEN datepart(mm, OC.CLASS_BEGIN_DATE) >=9 and datepart(mm, OC.CLASS_BEGIN_DATE) <=12 then  IsNull(OMP.LAW1_MISSION ,0)-- fall 
 ELSE 0  --there should be no law 4 
 END AS NUM_LAW, */ 
 
 -- this is a temporory .x as the class_begin_date is null. In order for a class to be fall, winter or spring 
 --it must have a class_begin_date. The analyst are working on ge.ng this corrected. Once .xed the  case statement 
    --above should be used for num_law 
 
 /*CASE    
   WHEN (OC.CLASS_NUMBER >  (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC')  
     and OC.CLASS_NUMBER <   (SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC') ) 
     then  IsNull(OMP.LAW2_MISSION ,0) --winter 
         WHEN  OC.CLASS_NUMBER = ( SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR = @FiscalYear and TRAINING_TYPE_CODE = 'OCC') then  IsNull(OMP.LAW3_MISSION ,0) --summer 
   WHEN OC.CLASS_NUMBER = (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC')  then IsNull(OMP.LAW1_MISSION ,0)-- fall 
 ELSE 0  --there should be no law 4 
 END AS NUM_LAW, */ 
     
 
 /*CASE    
   WHEN OC.CLASS_NUMBER = (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC')  
     -- fall 
     then IsNull(OMP.LAW1_MISSION ,0) 
 
   WHEN (OC.CLASS_NUMBER >  (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC')  
     and OC.CLASS_NUMBER <   (SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC') ) 
     --winter 
     then (select OMP2.LAW2_MISSION from OFFICER_SHIP_MISSION_PLAN OMP2  
     where OMP2.ORGANIZATION_ID = @Organiza.onID  
     and OMP2.FISCAL_YEAR = @FiscalYear 
        and OMP2.GRAD_YEAR = @FiscalYear + 1) 
      
   WHEN  OC.CLASS_NUMBER = ( SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR = @FiscalYear and TRAINING_TYPE_CODE = 'OCC') 
    --summer 
    then (select OMP3.LAW3_MISSION from OFFICER_SHIP_MISSION_PLAN OMP3  
             where OMP3.ORGANIZATION_ID = @Organiza.onID  
             and OMP3.FISCAL_YEAR = @FiscalYear 
             and OMP3.GRAD_YEAR = @FiscalYear + 1) 
   
   
 ELSE 0  --there should be no law 4 
 END AS NUM_LAW, */ 
    COALESCE(OMP.LAW1_MISSION, 0) AS NUM_LAW, 
 COALESCE(OMP.BLACK_MISSION, 0) AS NUM_BLACK,  
 COALESCE(OMP.HISPANIC_MISSION, 0) AS NUM_HISPANIC,  
 COALESCE(OMP.OTHER_MISSION, 0) AS NUM_OTHER 
 
FROM  
 RECRUITING_ORGANIZATION RO INNER JOIN #ORG O ON RO.ORGANIZATION_ID = O.ORG_ID 
 INNER JOIN OFFICER_SHIP_MISSION_PLAN OMP ON 
  (RO.ORGANIZATION_ID = OMP.ORGANIZATION_ID AND 
  OMP.OFFICER_SOURCE_CODE = 'OCC') 
 INNER JOIN OCS_CLASS OC ON OC.CLASS_NUMBER = OMP.OCC_CLASS_NUMBER AND OC.FISCAL_YEAR = @FiscalYear  
  
ORDER BY 
 OMP.OCC_CLASS_NUMBER 
END 
 
-- there is no plan 
ELSE 
BEGIN 
SELECT  
 'OCC' AS OFFICER_SOURCE_CODE, OC.CLASS_NUMBER AS OCC_CLASS_NUMBER, '0' AS MISSION_YEAR,  
 CASE 
  WHEN OC.CLASS_NUMBER = (SELECT MIN (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR =  @FiscalYear and TRAINING_TYPE_CODE = 'OCC') THEN 1 
  WHEN OC.CLASS_NUMBER = ( SELECT MAX (OC.CLASS_NUMBER) FROM OCS_CLASS OC WHERE OC.FISCAL_YEAR = @FiscalYear and TRAINING_TYPE_CODE = 'OCC') THEN 3 
 ELSE 2 
 END AS DATA_TABLE_NUM, 
 0 AS NUM_NFO, 0 AS NUM_AIR, 0 AS NUM_GROUND, 0 AS NUM_PLCR_GROUND, 0 AS NUM_OCCR_GROUND,  0 AS NUM_WOMEN,  
 0 AS NUM_LAW,  0 AS NUM_BLACK, 0 AS NUM_HISPANIC,  0 AS NUM_OTHER 
 FROM  OCS_CLASS OC WHERE FISCAL_YEAR  = @FiscalYear and  training_type_code  = 'OCC' 
  
END 
 
 
--- CLEAN UP 
DROP TABLE #ORG 
SET NOCOUNT OFF]]></body>
<schema>E9C4E37D-78A2-31F9-D580-7C2848ACFCB7</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>