<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[InsertUpdateDependentAddress]" directorySegmentName="seg_15" id="8DEB26D7-345B-94E4-36F1-0690ABCF8F4E">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:43:56 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@DependentAddressID  uniqueiden..er, 
 @Street1    varchar(75), 
 --@Street2    varchar(75), 
 @CityCode    varchar(4), 
 @CountyCode    varchar(4), 
 @StateCode    varchar(4), 
 @ZipCode    varchar(9), 
 @LastUpdateUserID  uniqueiden..er 
AS 
 
BEGIN 
 
-- STEP 1: Start the transac.on 
BEGIN TRANSACTION 
 
-- STEP 2 & 3: Issue the data change statement(s), checking @@ERROR a.er each statement 
IF EXISTS(SELECT DependentAddressId FROM DependentAddress WHERE DependentAddressId = @DependentAddressID) 
BEGIN 
 -- if @intCount > 0, then the prospect dependent already exists.  UPDATE. 
 UPDATE 
   DependentAddress 
  SET     
   DependentAddressID = @DependentAddressID, 
   Street1 = @Street1, 
   --Street2   = @Street2, 
   CityCode = @CityCode, 
   CountyCode = @CountyCode, 
   StateCode = @StateCode,   
   ZipCode = @ZipCode,     
   LastUpdateDate = GETDATE(),     
   LastUpdateUserId = @LastUpdateUserID 
  WHERE  
   DependentAddressID = @DependentAddressID 
END 
ELSE 
BEGIN 
 -- if @intCount = 0, then the prospect dependent does not exist.  INSERT. 
 INSERT INTO DependentAddress( 
    DependentAddressID, 
    Street1, 
    --Street2, 
    CityCode, 
    CountyCode, 
    StateCode, 
    ZipCode, 
    LastUpdateDate, 
    LastUpdateUserId)      
  VALUES ( 
    @DependentAddressID,  
    @Street1,  
    --@Street2, 
    @CityCode, 
    @CountyCode, 
    @StateCode, 
    @ZipCode, 
    GETDATE(), 
    @LastUpdateUserID) 
END 
 
-- Rollback the transac.on if there were any errors 
IF @@ERROR <> 0 
 BEGIN 
    -- Rollback the transac.on 
    ROLLBACK TRANSACTION 
 
    -- Raise an error and return 
    RAISERROR ('Error occurred while performing the change.', 16, 1) 
    RETURN 
 END 
 
-- Rollback the transac.on if the number of rows changed does not meet our expecta.on... 
IF @@ROWCOUNT > 1 
BEGIN 
    -- Rollback the transac.on 
    ROLLBACK TRANSACTION 
 
    -- Raise an error and return 
    RAISERROR ('An unexpected number of rows were changed.', 16, 1) 
    RETURN 
END 
  
-- STEP 4: If we reach this point, the commands completed successfully 
--         Commit the transac.on.... 
COMMIT TRANSACTION 
 
  
END]]></body>
<schema>A5B5C85F-7BA3-158E-D5A2-943767AC9AE2</schema>
<database>5DE69EDC-7A85-C77A-928E-DB3F41DD97CF</database>
</StoredProcedureSqlServerv2k5>