<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_get_pers_sitrep_stats_h]" directorySegmentName="seg_15" id="9FA2A083-E6D6-873A-EFD5-8ACB680C49AB">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:41 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@Organiza.onID int, 
 @Month   int, 
 @Year   int 
AS 
 
SET NOCOUNT ON 
 
DECLARE @MonthBeginDate date.me 
SET  @MonthBeginDate = CONVERT(date.me, CONVERT(varchar, @Month) + '/1/' + CONVERT(varchar, @Year)) 
DECLARE @RS_NAME varchar(15) 
 
CREATE TABLE #PROD_STATUS  
 (RS_NAME VARCHAR(45), RECRUITING_PERSON_ID INT, SHORT_NAME VARCHAR(15), [NAME] VARCHAR(60), BILLET VARCHAR(60), 
 ON_PRODUCTION BIT, NON_PROD_REASON VARCHAR(50), ORGANIZATION_ID INT) 
 
--- get the Recruiters, NCOICs etc assigned to the RSSs under the RS's 
INSERT INTO #PROD_STATUS 
SELECT  
 RO2.NAME as RS_NAME, 
 RP.RECRUITING_PERSON_ID, RO.SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
   --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
   --- SELECT THE RECRUITING ROLE AS THE BILLET 
   WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
   ELSE 
    --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
    COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
      DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
      ORDER BY RH.BILLET_END_DATE DESC), 
     (SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
      ORDER BY RH.BILLET_END_DATE DESC), 
     RR.SHORT_DESCRIPTION) 
   END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM PRODUCTION_STATUS_HISTORY PSH  
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH 
    INNER JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND 
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0 
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 RO.ORGANIZATION_ID 
FROM  
 RECRUITING_PERSON RP, RECRUITING_ORGANIZATION RO, 
 PERSON P, RECRUITING_ROLE RR, ORGANIZATION_MAP OM,  
 RECRUITING_ORGANIZATION RO2, ORGANIZATION_MAP OM2,  
 ORGANIZATION_MAP OM3, ORGANIZATION_MAP OM4 
WHERE 
 OM4.PARENT_ORGANIZATION_ID = @Organiza.onID AND 
        OM3.PARENT_ORGANIZATION_ID = OM4.CHILD_ORGANIZATION_ID AND 
        OM2.PARENT_ORGANIZATION_ID = OM3.CHILD_ORGANIZATION_ID AND 
        OM.PARENT_ORGANIZATION_ID = OM2.CHILD_ORGANIZATION_ID AND 
 OM2.CHILD_ORGANIZATION_ID = RO2.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 RP.TOUR_END_DATE IS NULL  
 
 
--- get the sta. members assinged to the RS's 
INSERT INTO #PROD_STATUS 
SELECT  
 RO.NAME as RS_NAME, 
 RP.RECRUITING_PERSON_ID, 'RS Sta.' AS SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
   --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
   --- SELECT THE RECRUITING ROLE AS THE BILLET 
   WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
   ELSE 
    --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
    COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
      DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
      ORDER BY RH.BILLET_END_DATE DESC), 
     (SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
      ORDER BY RH.BILLET_END_DATE DESC), 
     RR.SHORT_DESCRIPTION) 
   END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM PRODUCTION_STATUS_HISTORY PSH  
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH 
    INNER JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND 
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0 
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 RO.ORGANIZATION_ID 
FROM  
 RECRUITING_PERSON RP, RECRUITING_ORGANIZATION RO, 
 PERSON P, RECRUITING_ROLE RR, ORGANIZATION_MAP OM,  
 RECRUITING_ORGANIZATION RO2, ORGANIZATION_MAP OM2,  
 ORGANIZATION_MAP OM3 
WHERE 
 OM3.PARENT_ORGANIZATION_ID = @Organiza.onID AND 
        OM2.PARENT_ORGANIZATION_ID = OM3.CHILD_ORGANIZATION_ID AND 
        OM.PARENT_ORGANIZATION_ID = OM2.CHILD_ORGANIZATION_ID AND 
 OM2.CHILD_ORGANIZATION_ID = RO2.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 RP.TOUR_END_DATE IS NULL  
 
--- get the sta. members assinged to the Dist's 
INSERT INTO #PROD_STATUS 
SELECT  
 RO.NAME as RS_NAME, 
 RP.RECRUITING_PERSON_ID, 'Dist Sta.' AS SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
   --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
   --- SELECT THE RECRUITING ROLE AS THE BILLET 
   WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
   ELSE 
    --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
    COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
      DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
      ORDER BY RH.BILLET_END_DATE DESC), 
     (SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
      ORDER BY RH.BILLET_END_DATE DESC), 
     RR.SHORT_DESCRIPTION) 
   END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM PRODUCTION_STATUS_HISTORY PSH  
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH 
    INNER JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND 
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0 
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 RO.ORGANIZATION_ID 
FROM  
 RECRUITING_PERSON RP, RECRUITING_ORGANIZATION RO, 
 PERSON P, RECRUITING_ROLE RR, ORGANIZATION_MAP OM,  
 RECRUITING_ORGANIZATION RO2, ORGANIZATION_MAP OM2 
WHERE 
 OM2.PARENT_ORGANIZATION_ID = @Organiza.onID AND 
        OM.PARENT_ORGANIZATION_ID = OM2.CHILD_ORGANIZATION_ID AND 
 OM2.CHILD_ORGANIZATION_ID = RO2.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 RP.TOUR_END_DATE IS NULL  
 
 
--- get the sta. members assinged to the Region's 
 
INSERT INTO #PROD_STATUS 
SELECT  
 NULL as RS_NAME, 
 RP.RECRUITING_PERSON_ID, 'Reg Sta.' AS SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
   --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
   --- SELECT THE RECRUITING ROLE AS THE BILLET 
   WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
   ELSE 
    --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
    COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
      DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
      ORDER BY RH.BILLET_END_DATE DESC), 
     (SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
      ORDER BY RH.BILLET_END_DATE DESC), 
     RR.SHORT_DESCRIPTION) 
   END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM PRODUCTION_STATUS_HISTORY PSH  
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH 
    INNER JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND 
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0 
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 RO.ORGANIZATION_ID 
FROM  
 RECRUITING_PERSON RP, RECRUITING_ORGANIZATION RO, 
 PERSON P, RECRUITING_ROLE RR, ORGANIZATION_MAP OM 
WHERE 
 OM.PARENT_ORGANIZATION_ID = @Organiza.onID AND 
 OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 RP.TOUR_END_DATE IS NULL  
 
 
--- get the sta. members assinged to the MCRC 
INSERT INTO #PROD_STATUS 
SELECT  
 NULL as RS_NAME, 
 RP.RECRUITING_PERSON_ID, 'MCRC Sta.' AS SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
    --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
    --- SELECT THE RECRUITING ROLE AS THE BILLET 
    WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
    ELSE 
     --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
     COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
       WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
       DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
       ORDER BY RH.BILLET_END_DATE DESC), 
      (SELECT TOP 1 RH.BILLET_DESC FROM RECRUITER_HISTORY RH  
       WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
       ORDER BY RH.BILLET_END_DATE DESC), 
      RR.SHORT_DESCRIPTION) 
     END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM PRODUCTION_STATUS_HISTORY PSH  
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    ((PSH.CALENDAR_YEAR = @Year AND PSH.MONTH_CODE <= @Month) OR (PSH.CALENDAR_YEAR <= @Year)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC), 
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH, NON_PRODUCTION_REASON NPR WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND PSH.NON_PROD_REASON_CODE *= NPR.REASON_CODE AND (( 
    PSH.CALENDAR_YEAR = @Year AND PSH.MONTH_CODE <= @Month) OR (PSH.CALENDAR_YEAR <= @Year)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),   
 RO.ORGANIZATION_ID 
FROM  
 RECRUITING_PERSON RP, RECRUITING_ORGANIZATION RO, 
 PERSON P, RECRUITING_ROLE RR  
WHERE 
 RO.ORGANIZATION_ID = @Organiza.onID AND 
 RO.ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 RP.TOUR_END_DATE IS NULL  
 
--- UPDATE THE TEMP TABLE AND SET ANY NULL VALUES FOR ON_PRODUCTION TO 0 FOR OFF PRODUCTION 
UPDATE #PROD_STATUS SET ON_PRODUCTION = 0 WHERE ON_PRODUCTION IS NULL 
 
--- RETURN THE RESULT SET 
SELECT  RS_NAME, 
 case when m.primary_mos like '84%' then m.primary_mos 
             else null end as PMOS,  
 case when m.billet_mos like '84%' then m.billet_mos 
             else null end as BMOS,   
 m.EXPIRATION_OF_ACTIVE_SERVICE EAS, 
 RECRUITING_PERSON_ID, SHORT_NAME, [NAME], BILLET,  
 ON_PRODUCTION, NON_PROD_REASON, ORGANIZATION_ID  
FROM  
 #PROD_STATUS ps 
le. outer join marine m 
  on ps.recrui.ng_person_id = m.marine_id 
where present_grade_code like 'E%' 
ORDER BY rs_name, short_name,  
 [NAME] 
 
--- CLEAN UP 
SET NOCOUNT OFF 
DROP TABLE #PROD_STATUS]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>