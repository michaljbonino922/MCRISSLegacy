<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_GetMudData]" directorySegmentName="seg_18" id="7ABB4AF2-9295-C4F9-383C-DDD255AFBA5F">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@OrgId int = NULL, 
 @Fips varchar(5) = NULL, 
 @ZipCode varchar(9) = NULL, 
 @RSId varchar(5) = NULL, 
 @RSSId varchar(7) = NULL, 
 @StateCode varchar(3) = NULL, 
 @CountyCode varchar(4) = NULL 
 
  
 
AS 
 
 
SET NOCOUNT ON 
 
 
 
--- Create Orgs table 
CREATE TABLE #SUBORGS ( 
   ORG_ID int NOT NULL,  
   ORG_TYPE varchar(3),  
   USED bit NOT NULL 
   ) 
 
--- INDEX TEMP TABLE 
CREATE CLUSTERED INDEX idxSUBORGS ON #SUBORGS (ORG_ID) 
 
 
--- Create #IDS TABLES 
 CREATE TABLE #IDS (ORG_ID int NOT NULL) 
 
IF @OrgId IS NOT NULL  
BEGIN 
 
 
  
 -- Seed the temp table with the input OrgID 
 INSERT INTO #SUBORGS 
 SELECT ORGANIZATION_ID, 
  ORGANIZATION_TYPE, 
  0 
 FROM RECRUITING_ORGANIZATION 
 WHERE ORGANIZATION_ID = @OrgID 
  
 -- Con.nue processing un.l we have goten to the RS level 
 WHILE (SELECT COUNT(1) FROM #SUBORGS WHERE USED = 0) >= 1 
 BEGIN 
  
 -- Save all OrgIDs in the #SUBORGS table that we haven't goten children for yet. 
 INSERT INTO #IDS 
 SELECT ORG_ID 
 FROM #SUBORGS 
 WHERE USED = 0 
  
 -- Insert new children (with Used .ag = 0) into the #SUBORGS table. 
 INSERT INTO #SUBORGS 
 SELECT OM.CHILD_ORGANIZATION_ID, RO.ORGANIZATION_TYPE, 0 
 FROM ORGANIZATION_MAP OM INNER JOIN #SUBORGS SO ON OM.PARENT_ORGANIZATION_ID = SO.ORG_ID AND SO.USED = 0 
  INNER JOIN RECRUITING_ORGANIZATION RO ON OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID 
 WHERE 
  ORGANIZATION_TYPE <> 'OSS' AND RO.ISOPEN = 'Y' 
  
 -- Set the USED .ag to 1 for the OrgIDs that we just processed. 
 UPDATE #SUBORGS 
 SET USED = 1 
 WHERE ORG_ID IN (SELECT * FROM #IDS) 
  
 -- No need to save the OrgIDs that we just got children for.  They will remain in the #SUBORGS table 
 -- and are now marked as used/processed. 
 --- DELETE FROM #IDS 
  
 END 
 
 
END 
ELSE 
BEGIN 
 
 --- Get all orgids to .lter later on by zipcodes, rssid, .ps, etc.. 
 INSERT INTO #SUBORGS(ORG_ID, USED) 
 SELECT  
  ORGANIZATION_ID, 1 
 FROM  
  RECRUITING_ORGANIZATION 
END 
 
--- END IF ORG_ID IS NOT NULL 
 
 
 
CREATE TABLE #TEMP_RESULT 
( 
REGION VARCHAR(3) NOT NULL,  
DIST VARCHAR(3) NULL, 
RS VARCHAR(45) NULL, 
RSS VARCHAR(45) NULL, 
STATE_CODE VARCHAR(2) NULL, 
CITY_CODE VARCHAR(5) NULL, 
COUNTY_CODE VARCHAR(4) NULL, 
FIPS VARCHAR(5) NOT NULL, 
ZIP VARCHAR(9) NOT NULL, 
RSID VARCHAR(5) NULL, 
RSSID VARCHAR(5) NULL, 
LAT FLOAT NULL, 
LONG FLOAT NULL, 
REG_ORG_ID VARCHAR(3) NULL, 
DIST_ORG_ID VARCHAR(3) NULL, 
RS_ORG_ID VARCHAR(4) NULL, 
RSS_ORG_ID VARCHAR(4) NULL, 
STATUS_ID VARCHAR(1) NULL 
) 
 
--- INDEX TEMP TABLE 
CREATE CLUSTERED INDEX idxTRZIP ON #TEMP_RESULT (ZIP) 
 
 
---DROP TABLE #TEMP_RESULT 
 
INSERT INTO #TEMP_RESULT(REGION,DIST,RS,RSS,STATE_CODE,CITY_CODE,COUNTY_CODE,FIPS,ZIP,RSID, 
      RSSID,LAT,LONG,REG_ORG_ID,DIST_ORG_ID,RS_ORG_ID,RSS_ORG_ID,STATUS_ID) 
 
 
SELECT 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     MF.ASSIGNED_ORG_ID 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     dbo.GetRegIdByDist(MF.ASSIGNED_ORG_ID) 
    ELSE 
     OM2.PARENT_ORGANIZATION_ID 
   END 
  ELSE 
    OM2.PARENT_ORGANIZATION_ID 
  END AS REG_ORG_ID, 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     NULL 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     MF.ASSIGNED_ORG_ID 
    ELSE 
     OM3.PARENT_ORGANIZATION_ID 
   END 
  ELSE 
    OM3.PARENT_ORGANIZATION_ID 
  END AS DIST_ORG_ID,  
 CASE WHEN RO.ORGANIZATION_TYPE = 'RSS' THEN 
   RO2.NAME 
 END AS RS_NAME,  
 ---MF.ASSIGNED_ORG_ID AS ASSIGNED_ORG_ID, 
 CASE WHEN RO.ORGANIZATION_TYPE = 'RSS' THEN 
   RO.NAME + ' ' + RO.STATE_CODE 
 END AS RSS_NAME, 
 --- RO.STATE_CODE AS STATE, 
 --- 'TEST COUNTY' AS COUNTY, 
 MF.STATE_CODE, 
 MF.CITY_CODE, 
 MF.COUNTY_CODE, 
 MF.FIPS, 
 MF.ZIP, 
 ---OM2.PARENT_ORGANIZATION_ID AS REG_OrgId, 
 ---RO.ORGANIZATION_TYPE,  
 ---OM3.PARENT_ORGANIZATION_ID AS DIST_OrgId, 
 
 
  
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   NULL 
  ELSE 
   --- SUBSTRING(CAST(OM3.PARENT_ORGANIZATION_ID AS CHAR),2,2) + SUBSTRING(RO.MCC_CODE,1,3) 
   SUBSTRING(CAST(MU.MUD_ORG_NAME AS CHAR),2,2) + SUBSTRING(RO.MCC_CODE,1,3) 
 END AS RSID, 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   NULL 
  ELSE 
   SUBSTRING(RO.MCC_CODE,1,5) 
 END AS RSSID, 
 MF.LAT, 
 MF.LONG, 
 /**/ 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     MF.ASSIGNED_ORG_ID 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     dbo.GetRegIdByDist(MF.ASSIGNED_ORG_ID) 
    ELSE 
     OM2.PARENT_ORGANIZATION_ID 
   END 
  ELSE 
    OM2.PARENT_ORGANIZATION_ID 
  END AS REG_ORG_ID2, 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     NULL 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     MF.ASSIGNED_ORG_ID 
    ELSE 
     OM3.PARENT_ORGANIZATION_ID 
   END 
  ELSE 
    OM3.PARENT_ORGANIZATION_ID 
  END AS DIST_ORG_ID2, 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     NULL 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     NULL 
    ELSE 
     OM4.PARENT_ORGANIZATION_ID 
   END 
  ELSE 
    OM4.PARENT_ORGANIZATION_ID 
  END AS RS_ORG_ID2, 
 CASE 
  WHEN RO.ORGANIZATION_TYPE <> 'RSS' THEN 
   CASE  
    WHEN RO.ORGANIZATION_TYPE = 'R' THEN 
     NULL 
    WHEN RO.ORGANIZATION_TYPE = 'D' THEN 
     NULL 
    ELSE 
     RO.ORGANIZATION_ID 
   END 
  ELSE 
    RO.ORGANIZATION_ID 
  END AS RSS_ORG_ID2, 
 MF.STATUS_ID 
FROM  
 ---MUD_FILE MF INNER JOIN MUD_ZIP_ASSIGNMENT MZ ON 
 ---MF.ZIP = MZ.ZIP  
 MUD_FILE MF LEFT OUTER JOIN RECRUITING_ORGANIZATION RO ON 
 MF.ASSIGNED_ORG_ID = RO.ORGANIZATION_ID 
 LEFT OUTER JOIN ORGANIZATION_MAP OM4 ON 
 OM4.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID 
 LEFT OUTER JOIN ORGANIZATION_MAP OM3 ON 
 OM4.PARENT_ORGANIZATION_ID = OM3.CHILD_ORGANIZATION_ID 
 LEFT OUTER JOIN ORGANIZATION_MAP OM2 ON 
 OM3.PARENT_ORGANIZATION_ID = OM2.CHILD_ORGANIZATION_ID 
 LEFT OUTER JOIN RECRUITING_ORGANIZATION RO2 ON 
 OM4.PARENT_ORGANIZATION_ID = RO2.ORGANIZATION_ID 
 LEFT OUTER JOIN MUD_USER_DATA MU ON 
 OM3.PARENT_ORGANIZATION_ID = MU.ORG_ID 
WHERE 
 --- MF.ASSIGNED_ORG_ID IN (SELECT DISTINCT ORG_ID FROM #SUBORGS)  
 EXISTS (SELECT 1 FROM #SUBORGS SO WHERE SO.ORG_ID = MF.ASSIGNED_ORG_ID) AND 
 MF.STATUS_ID IN ('A','I') 
 
 
--- RETURN FORMATTED DATA 
SELECT  
 CASE 
   WHEN REGION = '901' THEN 
  'E' 
   ELSE 
  'W' 
 END AS REGION, 
 /* 
 CASE 
   WHEN DIST IS NOT NULL THEN 
  CASE WHEN REGION = '901' THEN 
   'E' + SUBSTRING(DIST,2,2) 
    ELSE 
   'W' + SUBSTRING(DIST,2,2) 
  END 
   ELSE 
  NULL 
 END AS DIST, 
 */ 
 MD.MUD_ORG_NAME AS DIST, 
 ---REGION + SUBSTRING(DIST,2,2) AS DIST, 
 RS, 
 RSS, 
 GL.STATE_CODE, 
 GL.CITY_CODE, 
 GL.COUNTY_CODE, 
 UPPER(GL.STATE_TEXT) AS STATE_TEXT, 
 UPPER(GL.COUNTY_TEXT) AS COUNTY_TEXT, 
 FIPS, 
 ZIP, 
 RSID, 
 RSSID, 
 LAT, 
 LONG, 
 REG_ORG_ID, 
 DIST_ORG_ID, 
 RS_ORG_ID, 
 RSS_ORG_ID, 
 STATUS_ID 
FROM #TEMP_RESULT TR LEFT OUTER JOIN MUD_GEO_LOCATION GL ON 
 TR.STATE_CODE = GL.STATE_CODE AND 
 TR.CITY_CODE = GL.CITY_CODE AND 
 TR.COUNTY_CODE = GL.COUNTY_CODE 
 LEFT OUTER JOIN MUD_USER_DATA MD ON 
 TR.DIST_ORG_ID = MD.ORG_ID 
WHERE 
 (1 = 1 AND @ZipCode IS NULL AND @Fips IS NULL AND @RSId IS NULL AND @RSSId IS NULL AND @STATECODE IS NULL AND @COUNTYCODE IS NULL) OR 
 ( 
  ZIP = @ZipCode OR 
  FIPS = @Fips OR 
  RSID = @RSId OR 
  RSSID = @RSSId OR 
  (GL.STATE_CODE = @STATECODE AND GL.COUNTY_CODE = @COUNTYCODE) OR 
  (@COUNTYCODE IS NULL AND GL.STATE_CODE = @STATECODE AND GL.COUNTY_CODE IN (SELECT DISTINCT COUNTY_CODE FROM MUD_GEO_LOCATION WHERE STATE_CODE = @STATECODE)) 
 ) 
ORDER BY 
 REGION, DIST, RS, RSS, STATE_TEXT, COUNTY_TEXT, FIPS, ZIP 
 
/* 
 (@ZipCode IS NOT NULL AND ZIP = @ZipCode OR 
  @Fips IS NOT NULL AND FIPS = @Fips OR 
  @RSId IS NOT NULL AND RSID = @RSId OR 
  @RSSId IS NOT NULL AND @RSSID = @RSSId) AND  
 1 = 1 
 
 
 ((@OrgId IS NOT NULL AND @ZipCode IS NULL) OR 
 (@OrgId IS NULL AND ZIP = @ZipCode) OR 
 (@OrgId IS NULL AND FIPS = @Fips) OR 
 (@OrgId IS NULL AND RSID = @RSId) OR 
 (@OrgId IS NULL AND RSSID = @RSSId)) AND 
 TR.STATUS_ID IN ('A','I') 
*/  
 
-- sp_GetMudData NULL, NULL, '00501', NULL, NULL 
--                 orgid, .ps, zip,  rsid, rssid 
 
 
--- CLEAN UP 
 
  
DROP TABLE #IDS 
DROP TABLE #SUBORGS 
DROP TABLE #TEMP_RESULT 
 
SET NOCOUNT OFF]]></body>
<schema>DD6CF638-A2EB-2E1B-FF13-422CA718DE2D</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>