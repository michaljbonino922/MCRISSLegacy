<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_GetNewMUDStateCityCnty]" directorySegmentName="seg_18" id="7CAED496-65B1-05D3-8285-18E67B028C76">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:41 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[AS 
 
SET NOCOUNT ON 
SET ANSI_WARNINGS OFF 
 
--- DROP TABLE #TMP_COUNTY_MAP_FILE_LOAD 
CREATE TABLE #TMP_COUNTY_MAP_FILE_LOAD 
( 
STATE VARCHAR(2) NOT NULL, 
CITY VARCHAR(30) NOT NULL, 
COUNTY VARCHAR(30) NOT NULL 
) 
 
--- REMOVE MILITARY TYPES 
DELETE MUD_STAGING WHERE TYPE = 'M' 
 
 
INSERT INTO #TMP_COUNTY_MAP_FILE_LOAD 
 
SELECT DISTINCT STATE, CITY, COUNTY 
FROM MUD_STAGING MS 
WHERE NOT EXISTS (SELECT 1 FROM MUD_GEO_LOCATION ML  
     WHERE  
      ML.STATE_TEXT = MS.STATE AND 
      ML.CITY_TEXT = MS.CITY AND 
      ML.COUNTY_TEXT = MS.COUNTY) 
 
--- DROP TABLE #MUD_GEO_LOCATION_STAGING_TABLE 
CREATE TABLE [dbo].[#MUD_GEO_LOCATION_STAGING_TABLE]( 
 [STATE] [varchar](2) COLLATE SQL_La.n1_General_CP1_CI_AS NULL, 
 [CITY] [varchar](50) COLLATE SQL_La.n1_General_CP1_CI_AS NULL, 
 [COUNTY] [varchar](30) COLLATE SQL_La.n1_General_CP1_CI_AS NULL, 
 [STATE_CODE] [varchar](2) COLLATE SQL_La.n1_General_CP1_CI_AS NULL, 
 [COUNTY_CODE] [varchar](4) COLLATE SQL_La.n1_General_CP1_CI_AS NULL, 
 [CITY_CODE] [varchar](5) COLLATE SQL_La.n1_General_CP1_CI_AS NULL 
) ON [PRIMARY] 
 
 
--- POPULATE STAGING TABLE 
INSERT INTO #MUD_GEO_LOCATION_STAGING_TABLE (STATE, COUNTY, CITY) 
SELECT DISTINCT STATE, COUNTY, CITY FROM #TMP_COUNTY_MAP_FILE_LOAD 
 
 
--- UPDATE STAGING TABLE WITH EXISTING STATE CODES FROM THE GEO_LOCATION TABLE 
UPDATE #MUD_GEO_LOCATION_STAGING_TABLE 
SET 
 STATE_CODE = GT.STATE_CODE 
FROM 
 #MUD_GEO_LOCATION_STAGING_TABLE MT LEFT OUTER JOIN MUD_GEO_LOCATION GT ON 
 MT.STATE = GT.STATE_TEXT 
WHERE 
 ISNUMERIC(GT.STATE_CODE) = 1 AND 
 --- CALIFORNIA HAS 6 AND 06 FOR STATE CODES, ONLY USE 06 
 GT.STATE_CODE <> '6' 
 
 
--- UPDATE STATES THAT ARE IN THE EXISTING GEO LOCATION TABLE BUT ARE NOT NUMERIC 
UPDATE #MUD_GEO_LOCATION_STAGING_TABLE 
SET 
 STATE_CODE = T.NEW_STATE_CODE 
FROM 
 #MUD_GEO_LOCATION_STAGING_TABLE M2 INNER JOIN 
     (SELECT    
         DISTINCT 
         S.STATE, 
         S.CITY, 
         S.COUNTY, 
         CASE 
          WHEN S.STATE_CODE IS NULL THEN  
           --- CONVERT(VARCHAR(3), 100 +  
           CASE WHEN EXISTS (SELECT 1 FROM MUD_GEO_LOCATION GT WHERE GT.STATE_TEXT = S.STATE) THEN 
            (SELECT DISTINCT TOP 1 GT.STATE_CODE FROM MUD_GEO_LOCATION GT WHERE GT.STATE_TEXT = S.STATE) 
           ELSE 
            /*CAST((( 
              SELECT  
               MAX(CAST(RTRIM(STATE_CODE) AS INT)) FROM MUD_GEO_LOCATION 
              WHERE 
               ISNUMERIC(STATE_CODE) = 1 
            ) + 1) AS VARCHAR(3)) 
            */ 
            NULL 
           END 
         END AS NEW_STATE_CODE 
        FROM 
         #MUD_GEO_LOCATION_STAGING_TABLE S 
     WHERE 
      S.STATE IN (SELECT DISTINCT STATE FROM #MUD_GEO_LOCATION_STAGING_TABLE  
     WHERE STATE_CODE IS NULL)) AS T ON 
 M2.STATE = T.STATE AND 
 M2.CITY = T.CITY AND 
 M2.COUNTY = T.COUNTY 
 
--- CREATE NEW STATE CODES FOR STATES THAT ARE NOT IN THE GEO LOCATION TABLE 
DECLARE @STARTSEED AS INT 
DECLARE @ENDSEED AS INT 
DECLARE @StateCount as int  
DECLARE @StateCode as int  
DECLARE @i int 
 
SET @STARTSEED = (SELECT MAX(CAST(STATE_CODE AS INT)) FROM MUD_GEO_LOCATION WHERE ISNUMERIC(STATE_CODE) = 1) + 1 
SELECT @StateCount = (SELECT COUNT(DISTINCT STATE) FROM #MUD_GEO_LOCATION_STAGING_TABLE WHERE STATE_CODE IS NULL) 
SET @ENDSEED = @STARTSEED + @StateCount 
 
 
--- DROP TABLE #TEMP_NEW_STATES 
CREATE TABLE #TEMP_NEW_STATES 
( 
NEW_STATE_CODE INT NOT NULL, 
STATE VARCHAR(2) NULL 
) 
  
DECLARE @CNT INT 
SET @CNT = 1 
 
CREATE TABLE #TEMP_COUNTER_STATES 
( 
ID INT IDENTITY NOT NULL, 
STATE VARCHAR(2) NULL 
) 
INSERT INTO #TEMP_COUNTER_STATES 
SELECT DISTINCT STATE FROM #MUD_GEO_LOCATION_STAGING_TABLE WHERE STATE_CODE IS NULL 
 
IF EXISTS (SELECT STATE FROM #MUD_GEO_LOCATION_STAGING_TABLE WHERE STATE_CODE IS NULL) 
BEGIN 
 SET @i = 0 
 
 WHILE @i <= @StateCount 
 BEGIN 
  SET @StateCode = @STARTSEED + @i 
 
  INSERT INTO #TEMP_NEW_STATES (NEW_STATE_CODE, STATE) 
  SELECT  
   @StateCode AS NEW_STATE_CODE, T.STATE 
  FROM 
   #TEMP_COUNTER_STATES T  
  WHERE 
   T.ID = @i 
 
 
  SET @i = @i + 1 
 END 
 
 /*  
 --- DBCC CHECKIDENT('#TEMP_NEW_STATES', RESEED, @STARTSEED)  
 WHILE @STARTSEED <= (SELECT COUNT(DISTINCT STATE) FROM #MUD_GEO_LOCATION_STAGING_TABLE WHERE STATE_CODE IS NULL) 
 BEGIN 
  INSERT INTO #TEMP_NEW_STATES(NEW_STATE_CODE, STATE) 
  SELECT @STARTSEED AS NEW_STATE_CODE, STATE 
   FROM 
    #TEMP_COUNTER_STATES 
   WHERE 
    ID = @CNT 
 
  --- INCREMENT 
  SET @STARTSEED = @STARTSEED + 1 
  SET @CNT = @CNT +1 
 
 END 
 */ 
END 
 
IF EXISTS (SELECT 1 FROM #MUD_GEO_LOCATION_STAGING_TABLE WHERE STATE_CODE IS NULL) 
BEGIN 
 
 UPDATE  
  #MUD_GEO_LOCATION_STAGING_TABLE 
 SET 
  STATE_CODE = TS.NEW_STATE_CODE 
 FROM 
  #MUD_GEO_LOCATION_STAGING_TABLE M2 INNER JOIN #TEMP_NEW_STATES TS ON 
  M2.STATE = TS.STATE 
 
END 
  
UPDATE  
 #MUD_GEO_LOCATION_STAGING_TABLE  
SET 
 COUNTY_CODE = G.COUNTY_CODE 
FROM  
 #MUD_GEO_LOCATION_STAGING_TABLE S INNER JOIN #TMP_COUNTY_MAP_FILE_LOAD T1 ON  
  (T1.STATE = S.STATE AND  
  T1.COUNTY = S.COUNTY) 
 INNER JOIN  
  (SELECT DISTINCT STATE_CODE, COUNTY_CODE, COUNTY_TEXT FROM MUD_GEO_LOCATION) G ON  
   (S.STATE_CODE = G.STATE_CODE AND  
   S.COUNTY = G.COUNTY_TEXT) 
 
 
UPDATE  
 #MUD_GEO_LOCATION_STAGING_TABLE  
SET 
 COUNTY_CODE = T.NEW_COUNTY_CODE 
FROM  
 #MUD_GEO_LOCATION_STAGING_TABLE S INNER JOIN  
 (SELECT  
  S.STATE_CODE, S.COUNTY,  
  CASE  
   WHEN S.COUNTY_CODE IS NULL THEN   
    CONVERT(VARCHAR(4),  
     CASE  
      WHEN S.COUNTY_CODE IS NULL THEN  
       COALESCE((SELECT MAX(COUNTY_CODE) FROM MUD_GEO_LOCATION S1 WHERE S1.STATE_TEXT = S.STATE), 1000) + 1 + 
       (SELECT COUNT(*) FROM #MUD_GEO_LOCATION_STAGING_TABLE S1 WHERE S1.STATE = S.STATE AND S1.COUNTY < S.COUNTY) 
      ELSE 1000 
      END) 
   ELSE S.COUNTY_CODE 
  END AS NEW_COUNTY_CODE 
 FROM  
  #MUD_GEO_LOCATION_STAGING_TABLE S) T  
 ON S.STATE_CODE = T.STATE_CODE AND S.COUNTY = T.COUNTY 
 
 
UPDATE  
 #MUD_GEO_LOCATION_STAGING_TABLE  
SET 
 CITY_CODE = G.CITY_CODE 
FROM  
 #MUD_GEO_LOCATION_STAGING_TABLE S INNER JOIN #TMP_COUNTY_MAP_FILE_LOAD T1 ON  
  (T1.STATE = S.STATE AND  
  T1.COUNTY = S.COUNTY AND 
  T1.CITY = S.CITY) 
 INNER JOIN (SELECT DISTINCT STATE_CODE, STATE_TEXT, COUNTY_CODE, COUNTY_TEXT, CITY_CODE, CITY_TEXT FROM MUD_GEO_LOCATION) G ON  
  (S.STATE = G.STATE_TEXT AND  
  S.COUNTY = G.COUNTY_TEXT AND  
  S.CITY = G.CITY_TEXT) 
 
 
UPDATE  
 #MUD_GEO_LOCATION_STAGING_TABLE  
SET 
 CITY_CODE = T.NEW_CITY_CODE 
FROM   
 #MUD_GEO_LOCATION_STAGING_TABLE S INNER JOIN  
 (SELECT  
  S.CITY_CODE,     
  CASE  
   WHEN S.CITY_CODE IS NULL THEN   
    CONVERT(VARCHAR(5),  
    COALESCE((SELECT MAX(CITY_CODE) FROM MUD_GEO_LOCATION S1 WHERE S1.STATE_TEXT = S.STATE AND S1.COUNTY_TEXT = S.COUNTY), 10000) + 1 +  
      (SELECT COUNT(*) FROM #MUD_GEO_LOCATION_STAGING_TABLE S1 WHERE S1.STATE = S.STATE AND S1.COUNTY = S.COUNTY AND S1.CITY < S.CITY))  
   ELSE S.CITY_CODE 
  END AS NEW_CITY_CODE,  
  S.STATE_CODE, S.COUNTY_CODE, S.CITY 
 FROM  
  #MUD_GEO_LOCATION_STAGING_TABLE S) T ON  
 (S.STATE_CODE = T.STATE_CODE AND  
 S.COUNTY_CODE = T.COUNTY_CODE AND  
 S.CITY = T.CITY) 
 
 
INSERT INTO MUD_GEO_LOCATION (CITY_CODE, COUNTY_CODE, STATE_CODE, CITY_TEXT, COUNTY_TEXT, STATE_TEXT, USER_LOGIN, UPDATE_DATE, COUNTRY_DESCRIPTION)  
SELECT  
 T.CITY_CODE, T.COUNTY_CODE, T.STATE_CODE,  
 UPPER(T.CITY) AS CITY, UPPER(T.COUNTY) AS COUNTY, UPPER(T.STATE) AS STATE,  
 'MUD FILE' AS USER_LOGIN, GETDATE() AS UPDATE_DATE,  
 NULL AS COUNTRY_DESCRIPTION 
FROM  
 #MUD_GEO_LOCATION_STAGING_TABLE T  
WHERE  
 NOT EXISTS (SELECT 1 FROM MUD_GEO_LOCATION G WHERE G.STATE_CODE = T.STATE_CODE AND G.COUNTY_CODE = T.COUNTY_CODE AND G.CITY_CODE = T.CITY_CODE) 
 
 
--- CLEAN UP 
DROP TABLE #MUD_GEO_LOCATION_STAGING_TABLE 
DROP TABLE #TMP_COUNTY_MAP_FILE_LOAD 
DROP TABLE #TEMP_NEW_STATES 
DROP TABLE #TEMP_COUNTER_STATES 
 
SET NOCOUNT OFF 
SET ANSI_WARNINGS ON]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>