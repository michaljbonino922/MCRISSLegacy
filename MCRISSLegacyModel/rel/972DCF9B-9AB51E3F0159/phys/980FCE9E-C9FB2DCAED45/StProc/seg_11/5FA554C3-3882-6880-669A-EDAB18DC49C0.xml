<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[ImportQSNs]" directorySegmentName="seg_11" id="5FA554C3-3882-6880-669A-EDAB18DC49C0">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:42:37 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[( 
 @ImportedQSNs xml 
) 
AS 
BEGIN 
 
 BEGIN TRANSACTION 
  
 BEGIN TRY 
 declare @SerialNumber varchar(100) 
 declare @FiscalYear int 
 declare @ApplicantPackageType varchar(100) 
 declare @RUC varchar(100) 
    declare @MOS varchar(100) 
 declare @ReserveUnit varchar(100) 
 declare @District varchar(2) 
 declare @Grade varchar(100) 
 declare @Rank varchar(100) 
  
 declare @RUCReserveUnitID uniqueiden..er 
 declare @idoc int 
 
    exec sp_xml_preparedocument @idoc output,@ImportedQSNs 
     
    --#tempImportedQSNs is temp table used to store the xml data. 
    select SerialNumber, FiscalYear, ApplicantPackageType, RUC, MOS, ReserveUnit, District, Grade, Rank into #tempImportedQSNs from openxml(@idoc,'ArrayOfImportedQSN/ImportedQSN',2) 
    with                                 
    ( 
  SerialNumber varchar(500), 
        FiscalYear int, 
        ApplicantPackageType varchar(500), 
        RUC varchar(500), 
        MOS varchar(500), 
        ReserveUnit varchar(500), 
        District varchar(500), 
        Grade varchar(500), 
        Rank varchar(500) 
    ) 
 
    exec sp_xml_removedocument @idoc 
 
 --check for duplicates of serial numbers on spreadsheet itself 
    if exists (select SerialNumber, count(*) from #tempImportedQSNs group by SerialNumber having count(*)>1) 
  RAISERROR('There are duplicate QSNs within the spreadsheet.',16,1) 
  
 --check for duplicates of spreadsheet serial numbers that already exist 
    if exists (select SerialNumber from #tempImportedQSNs where SerialNumber <> '' and SerialNumber in 
  (select SerialNumber from QSN)) 
  RAISERROR('The spreadsheet contains serial numbers that are already in the database.',16,1) 
 
 --insert RUC, ReserveUnit, and MOS data that do not exist in the DB already 
 declare cu_ruc cursor for select RUC from #tempImportedQSNs where RUC <> '' and RUC not in 
  (select descrip.on from [dbo].[RUC]) 
  
 open cu_ruc 
          
 fetch cu_ruc into @RUC 
 while (@@fetch_status = 0)     
 begin 
  insert into [dbo].[RUC] (descrip.on) values (@RUC) 
  fetch cu_ruc into @RUC 
 end 
 
 close cu_ruc 
 deallocate cu_ruc 
 
 declare cu_reserve_unit cursor for select ReserveUnit from #tempImportedQSNs where ReserveUnit <> '' and ReserveUnit not in 
  (select descrip.on from [dbo].[ReserveUnit]) 
  
 open cu_reserve_unit 
          
 fetch cu_reserve_unit into @ReserveUnit 
 while (@@fetch_status = 0)     
 begin 
  insert into [dbo].[ReserveUnit] (descrip.on) values (@ReserveUnit) 
  fetch cu_reserve_unit into @ReserveUnit 
 end 
 
 close cu_reserve_unit 
 deallocate cu_reserve_unit 
 
 declare cu_mos cursor for select MOS from #tempImportedQSNs where MOS <> '' and MOS not in 
  (select descrip.on from [dbo].[MOS]) 
  
 open cu_mos 
          
 fetch cu_mos into @MOS 
 while (@@fetch_status = 0)     
 begin 
  insert into [dbo].[MOS] (descrip.on) values (@MOS) 
  fetch cu_mos into @MOS 
 end 
 
 close cu_mos 
 deallocate cu_mos 
 
 declare cu_ruc_reserve_unit cursor for select RUC, ReserveUnit from #tempImportedQSNs 
   where RUC <> '' and RUC + ' - ' + ReserveUnit not in 
   (select r.descrip.on + ' - ' + ru.descrip.on from [dbo].[RUC] r, [dbo].[ReserveUnit] ru, [dbo].[RUCReserveUnit] rru 
    where rru.RUCID = r.RUCID and rru.ReserveUnitID = ru.ReserveUnitID) 
   and RUC not in 
   (select r.descrip.on from [dbo].[RUC] r, [dbo].[RUCReserveUnit] rru 
    where rru.RUCID = r.RUCID and rru.ReserveUnitID is null) 
  
 open cu_ruc_reserve_unit 
          
 fetch cu_ruc_reserve_unit into @RUC, @ReserveUnit 
 while (@@fetch_status = 0)     
 begin 
  insert into [dbo].[RUCReserveUnit] (RUCReserveUnitID, RUCID, ReserveUnitID) 
  select NEWID(), (select RUCID from [dbo].[RUC] where descrip.on = @RUC), 
   (select ReserveUnitID from [dbo].[ReserveUnit] where descrip.on = @ReserveUnit) 
  fetch cu_ruc_reserve_unit into @RUC, @ReserveUnit 
 end 
 
 close cu_ruc_reserve_unit 
 deallocate cu_ruc_reserve_unit 
  
 --end inserts of missing lookups 
  
 -- now insert all the qsns  
 declare cu_qsn cursor for select SerialNumber, FiscalYear, ApplicantPackageType, RUC, MOS, ReserveUnit, District, Grade, Rank from #tempImportedQSNs 
 
 open cu_qsn 
      
 fetch cu_qsn into @SerialNumber, @FiscalYear, @ApplicantPackageType, @RUC, @MOS, @ReserveUnit, @District, @Grade, @Rank 
 while (@@fetch_status = 0)     
 begin 
  if (@ReserveUnit <> '') 
   set @RUCReserveUnitID =  
    (select rru.RUCReserveUnitID 
    from [dbo].[RUC] r, [dbo].[ReserveUnit] ru, [dbo].[RUCReserveUnit] rru 
    where rru.RUCID = r.RUCID and rru.ReserveUnitID = ru.ReserveUnitID 
    and r.descrip.on = @RUC and ru.descrip.on = @ReserveUnit) 
  else if (@RUC <> '') 
   set @RUCReserveUnitID = 
    (select rru.RUCReserveUnitID  
    from [dbo].[RUC] r, [dbo].[RUCReserveUnit] rru 
    where rru.RUCID = r.RUCID and rru.ReserveUnitID is null 
    and r.descrip.on = @RUC) 
  else 
   set @RUCReserveUnitID = NULL 
   
   
  insert into [dbo].[QSN] 
  (QSNID, SerialNumber, FiscalYear, ApplicantPackageTypeID, RUCReserveUnitID, 
   MOSID, AssignedOrgUnitID, PayGradeType, PayGradeID, Ini.alRUCReserveUnitID, Ini.alMOSID) 
  select NEWID(), @SerialNumber, 
   (select @FiscalYear), 
   (select ApplicantPackageTypeID from [dbo].[ApplicantPackageType] where descrip.on = @ApplicantPackageType), 
   @RUCReserveUnitID, 
   (select MOSID from [dbo].[MOS] where descrip.on = @MOS), 
   (select PSROrgUnitID from [dbo].[PSROrgUnit] where descrip.on = @District), 
   @Grade, 
   (select PayGradeID from [dbo].[PayGrade] where descrip.on = @Rank), 
   @RUCReserveUnitID, 
   (select MOSID from [dbo].[MOS] where descrip.on = @MOS) 
     
  fetch cu_qsn into @SerialNumber, @FiscalYear, @ApplicantPackageType, @RUC, @MOS, @ReserveUnit, @District, @Grade, @Rank 
 end 
     
 close cu_qsn 
 deallocate cu_qsn 
  
 END TRY 
 BEGIN CATCH 
  DECLARE @ERRORMESSAGE VARCHAR(1000) 
  SELECT @ERRORMESSAGE = ERROR_MESSAGE() 
   
  IF @@TRANCOUNT > 0 
   ROLLBACK TRANSACTION 
  RAISERROR(@ERRORMESSAGE,16,1) 
 END CATCH 
 
 IF @@TRANCOUNT > 0  
 -- If we reach this point, the commands completed successfully. 
 COMMIT TRANSACTION 
END]]></body>
<schema>CEC76C37-9D45-8E15-510C-CBE87FFE10F5</schema>
<database>0070DB58-AADF-159B-2831-3CD8EEAC6A57</database>
</StoredProcedureSqlServerv2k5>