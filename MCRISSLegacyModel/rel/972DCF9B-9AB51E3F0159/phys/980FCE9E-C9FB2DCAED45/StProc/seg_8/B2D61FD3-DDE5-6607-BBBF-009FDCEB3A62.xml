<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[GetPersonnelSitRepStats]" directorySegmentName="seg_8" id="B2D61FD3-DDE5-6607-BBBF-009FDCEB3A62">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@Organiza.onID int, 
 @Month   int, 
 @Year   int 
AS 
 
SET NOCOUNT ON 
 
DECLARE @MonthBeginDate date.me 
SET  @MonthBeginDate = CONVERT(date.me, CONVERT(varchar, @Month) + '/1/' + CONVERT(varchar, @Year)) 
DECLARE @RS_NAME varchar(15) 
 
CREATE TABLE #PROD_STATUS  
 (RECRUITING_PERSON_ID INT NULL, SHORT_NAME VARCHAR(15) NULL, [NAME] VARCHAR(60) NULL, BILLET VARCHAR(60) NULL, 
 ON_PRODUCTION BIT NULL, NON_PROD_REASON VARCHAR(50) NULL, ORGANIZATION_ID INT NULL) 
 
--- get the Recruiters, NCOICs etc assigned to the RSSs under the RS 
SELECT  
 RP.RECRUITING_PERSON_ID, RO.SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
   --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
   --- SELECT THE RECRUITING ROLE AS THE BILLET 
   WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
   ELSE 
    --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
    COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM MCRISS..RECRUITER_HISTORY RH WITH (NOLOCK) 
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
      DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
      ORDER BY RH.BILLET_END_DATE DESC), 
     (SELECT TOP 1 RH.BILLET_DESC FROM MCRISS..RECRUITER_HISTORY RH WITH (NOLOCK) 
      WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
      ORDER BY RH.BILLET_END_DATE DESC), 
     RR.SHORT_DESCRIPTION) 
   END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM MCRISS..PRODUCTION_STATUS_HISTORY PSH WITH (NOLOCK) 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    DATEDIFF(MONTH, CONVERT(DATETIME, CONVERT(VARCHAR(2), PSH.MONTH_CODE) + '/1/' +  
     CONVERT(VARCHAR(4), PSH.CALENDAR_YEAR)), @MonthBeginDate) >= 0  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),  
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH WITH (NOLOCK) LEFT JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND ((PSH.CALENDAR_YEAR = @Year AND PSH.MONTH_CODE <= @Month) OR (PSH.CALENDAR_YEAR < @Year)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),   
 RO.ORGANIZATION_ID 
 INTO #ALL_RECRUITERS 
FROM  
 MCRISS..RECRUITING_PERSON RP WITH (NOLOCK), MCRISS..RECRUITING_ORGANIZATION RO WITH (NOLOCK), 
 MCRISS..PERSON P WITH (NOLOCK), MCRISS..RECRUITING_ROLE RR WITH (NOLOCK), MCRISS..ORGANIZATION_MAP OM WITH (NOLOCK) 
WHERE 
 --- get all recruiters where their parent and child orgs are equal to the orgId. 
 --- Filter out the sta. members later. 
 (OM.PARENT_ORGANIZATION_ID = @Organiza.onID OR OM.CHILD_ORGANIZATION_ID = @Organiza.onID) AND 
 OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
 OM.CHILD_ORGANIZATION_ID = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 (RP.TOUR_END_DATE IS NULL OR 
 --- or month is equal to current and prior parameter month  
 (DATEDIFF(MONTH, @MonthBeginDate, RP.TOUR_END_DATE) >= 0))  
 
--- get the sta. members assinged to the RS 
SELECT  
 RP.RECRUITING_PERSON_ID, 'RS Sta.' AS SHORT_NAME, 
 RTRIM(P.LAST_NAME) + SPACE(1) + RTRIM(P.FIRST_NAME) + COALESCE(SPACE(1) + LEFT(P.LEGAL_MIDDLE_NAME, 1), '') AS NAME, 
 BILLET =  CASE  
    --- IF THE BILLET BEGIN DATE IS IN THE MONTH OR PRIOR TO THE MONTH  
    --- SELECT THE RECRUITING ROLE AS THE BILLET 
    WHEN DATEDIFF(MONTH, RP.BILLET_BEGIN_DATE, @MonthBeginDate) >= 0 THEN RR.SHORT_DESCRIPTION  
    ELSE 
     --- OTHERWISE GO TO THE RECRUITER_HISTORY TABLE 
     COALESCE((SELECT TOP 1 RH.BILLET_DESC FROM MCRISS..RECRUITER_HISTORY RH WITH (NOLOCK) 
       WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID AND  
       DATEDIFF(MONTH, RH.EFFECTIVE_DATE, @MonthBeginDate) = 0 
       ORDER BY RH.BILLET_END_DATE DESC), 
      (SELECT TOP 1 RH.BILLET_DESC FROM MCRISS..RECRUITER_HISTORY RH WITH (NOLOCK) 
       WHERE RH.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID  
       ORDER BY RH.BILLET_END_DATE DESC), 
      RR.SHORT_DESCRIPTION) 
     END, 
 /* 
 update ON_PRODUCTION and NON_PROD_REASON 
 update ON_PRODUCTION and NON_PROD_REASON logic so that CALENDAR_YEAR <= @Year AND MONTH_CODE <= @Month 
 so that the produc.on status is not changed to "ON" at the beginning of each month 
 the new month value defaults to the old month value 
 */ 
 ON_PRODUCTION = (SELECT TOP 1 PSH.ON_PRODUCTION FROM MCRISS..PRODUCTION_STATUS_HISTORY PSH WITH (NOLOCK) 
    WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND  
    ((PSH.CALENDAR_YEAR = @Year AND PSH.MONTH_CODE <= @Month) OR (PSH.CALENDAR_YEAR <= @Year)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC), 
 NON_PROD_REASON = (SELECT TOP 1 NPR.SHORT_DESC FROM PRODUCTION_STATUS_HISTORY PSH WITH (NOLOCK) LEFT JOIN NON_PRODUCTION_REASON NPR ON PSH.NON_PROD_REASON_CODE = NPR.REASON_CODE WHERE PSH.PERSON_ID = RP.RECRUITING_PERSON_ID AND ((PSH.CALENDAR_YEAR = @Year AND PSH.MONTH_CODE <= @Month) OR (PSH.CALENDAR_YEAR < @Year)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC),   
 RO.ORGANIZATION_ID 
 INTO #ALL_STAFF 
FROM  
 MCRISS..RECRUITING_PERSON RP WITH (NOLOCK), MCRISS..RECRUITING_ORGANIZATION RO WITH (NOLOCK), 
 MCRISS..PERSON P WITH (NOLOCK), MCRISS..RECRUITING_ROLE RR  WITH (NOLOCK) 
WHERE 
 RO.ORGANIZATION_ID  = @Organiza.onID AND 
 RO.ORGANIZATION_ID  = RP.ORGANIZATION_ID AND 
 RP.RECRUITING_PERSON_ID = P.PERSON_ID AND 
 RP.RECRUITING_ROLE_ID  = RR.RECRUITING_ROLE_ID AND 
 --- tour end date is null for all people currently assigned to the unit 
 (RP.TOUR_END_DATE IS NULL OR 
 --- or month is equal to current and prior parameter month  
 (DATEDIFF(MONTH, @MonthBeginDate, RP.TOUR_END_DATE) >= 0)) /*and 
 --- sta. member orgId's will only equal the parent orgid, exclude others 
 rp.organiza.on_id <> (select top 1 psh.organiza.on_id from produc.on_status_history psh 
    where psh.person_id = rp.recrui.ng_person_id and 
    ((psh.calendar_year = @Year and psh.month_code <= @Month) OR (PSH.CALENDAR_YEAR <= @Year))  
    ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC) and 
 --- check that sta. member is o. produc.on for that month/year 
 0 = (select top 1 psh.on_produc.on from produc.on_status_history psh 
    where psh.person_id = rp.recrui.ng_person_id and 
    ((psh.calendar_year = @Year and psh.month_code <= @Month)) ORDER BY PSH.CALENDAR_YEAR DESC, PSH.MONTH_CODE DESC)   
 */ 
 
--- Populate prod_status with all recruiters who are not sta. members 
INSERT INTO #PROD_STATUS 
SELECT  
 RECRUITING_PERSON_ID, 
 CASE WHEN ORGANIZATION_ID = 1033 THEN 
  (SELECT TOP 1 RSS_NAME FROM RECRUITER_HISTORY RH WHERE RH.RECRUITING_PERSON_ID = RECRUITING_PERSON_ID  
  ORDER BY BILLET_END_DATE DESC) 
  ELSE 
  SHORT_NAME 
 END AS SHORT_NAME, 
 [NAME], 
 BILLET, 
 ON_PRODUCTION, 
 NON_PROD_REASON, 
 ORGANIZATION_ID 
FROM  
 #ALL_RECRUITERS R 
WHERE NOT EXISTS (SELECT 1 FROM #ALL_STAFF S WHERE S.RECRUITING_PERSON_ID = R.RECRUITING_PERSON_ID) 
 
 
--- Populate prod_status with all sta. members 
INSERT INTO #PROD_STATUS 
SELECT * FROM #ALL_STAFF 
 
 
 
--- UPDATE THE TEMP TABLE AND SET ANY NULL VALUES FOR ON_PRODUCTION TO 0 FOR OFF PRODUCTION 
UPDATE #PROD_STATUS SET ON_PRODUCTION = 0 WHERE ON_PRODUCTION IS NULL 
 
--- RETURN THE RESULT SET 
SET @RS_NAME = (SELECT NAME FROM MCRISS..RECRUITING_ORGANIZATION WITH (NOLOCK) WHERE ORGANIZATION_ID = @Organiza.onID) 
 
SELECT   
 COALESCE(@RS_NAME, SPACE(0)) AS RS_NAME,  
 COALESCE(M.PRIMARY_MOS, SPACE(0)) AS PRIMARY_MOS,   
 COALESCE(M.BILLET_MOS, SPACE(0)) AS BILLET_MOS, 
 M.EXPIRATION_OF_ACTIVE_SERVICE EAS, 
 RP.RECRUITING_PERSON_ID,  
 COALESCE(SHORT_NAME, SPACE(0)) AS SHORT_NAME,  
 COALESCE([NAME], SPACE(0)) AS [NAME],  
 COALESCE(BILLET, SPACE(0)) AS BILLET,  
 PS.ON_PRODUCTION,  
 COALESCE(NON_PROD_REASON, SPACE(0)) AS NON_PROD_REASON,  
 PS.ORGANIZATION_ID,  
 COALESCE(RR.PRODUCTION_BILLET, 'N') AS PRODUCTION_BILLET, 
 CASE  
  WHEN EXISTS (SELECT MARINE_ID FROM INTENDED_MOS IM WHERE IM.MARINE_ID = PS.RECRUITING_PERSON_ID) THEN 'Y' 
  ELSE 'N' 
 END AS IMOS,  
 COALESCE(M.COMPONENT_CODE, SPACE(0)) AS COMPONENT_CODE 
FROM  
 #PROD_STATUS PS LEFT OUTER JOIN MCRISS..MARINE M ON PS.RECRUITING_PERSON_ID = M.MARINE_ID 
 INNER JOIN RECRUITING_PERSON RP ON 
 PS.RECRUITING_PERSON_ID = RP.RECRUITING_PERSON_ID 
 LEFT OUTER JOIN MCRISS..RECRUITING_ROLE RR ON RP.RECRUITING_ROLE_ID = RR.RECRUITING_ROLE_ID 
WHERE  
 M.PRESENT_GRADE_CODE LIKE 'E%'  
 --- AND M.BILLET_MOS IN ('8411', '8412') 
ORDER BY  
 [NAME] 
 
--- CLEAN UP 
SET NOCOUNT OFF 
DROP TABLE #PROD_STATUS 
DROP TABLE #ALL_RECRUITERS 
DROP TABLE #ALL_STAFF]]></body>
<schema>E9C4E37D-78A2-31F9-D580-7C2848ACFCB7</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>