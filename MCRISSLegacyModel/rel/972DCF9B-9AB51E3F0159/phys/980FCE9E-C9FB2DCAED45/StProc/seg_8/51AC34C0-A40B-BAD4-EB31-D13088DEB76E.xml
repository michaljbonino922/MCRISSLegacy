<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[GetProgramAvailabilityByOrgForProgram]" directorySegmentName="seg_8" id="51AC34C0-A40B-BAD4-EB31-D13088DEB76E">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@Recrui.ngOrgID  int, 
 @ProgramID   int, 
 @FiscalYear   int 
AS 
-- BK: PORTED WITH MINOR MODS FROM LEGACY 
SET NOCOUNT ON 
 
DECLARE @OrgType varchar(3) 
SELECT @OrgType = ORGANIZATION_TYPE FROM [dbo].[RECRUITING_ORGANIZATION] WITH (NOLOCK) WHERE ORGANIZATION_ID = @Recrui.ngOrgID 
 
--- CREATE TEMP TABLE TO HANDLE ORGANIZATION DATA 
CREATE TABLE #ORG (ORG_ID INT NULL, ORG_TYPE VARCHAR(3) NULL, ASSIGNED_ORGANIZATION_ID INT NULL) 
 
--- INSERT THE @Recrui.ngOrgID INTO THE TEMP TABLE 
INSERT INTO #ORG (ORG_ID, ORG_TYPE, ASSIGNED_ORGANIZATION_ID) VALUES (@Recrui.ngOrgID, @OrgType, @Recrui.ngOrgID) 
 
IF @OrgType = 'H'  
BEGIN 
 --- FOR MCRC, INSERT REGIONS, DISTRICTS, AND RSs INTO THE TEMP TABLE 
 INSERT INTO #ORG  
  (ORG_ID, ORG_TYPE, ASSIGNED_ORGANIZATION_ID)  
 SELECT 
  RO.ORGANIZATION_ID, RO.ORGANIZATION_TYPE,  
  CASE RO.ORGANIZATION_TYPE 
   WHEN 'R' THEN RO.ORGANIZATION_ID 
   WHEN 'D' THEN (SELECT REG.PARENT_ORGANIZATION_ID FROM [dbo].[ORGANIZATION_MAP] REG WHERE REG.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID) 
   ELSE (SELECT REG.PARENT_ORGANIZATION_ID FROM [dbo].[ORGANIZATION_MAP] REG 
     INNER JOIN [dbo].[ORGANIZATION_MAP] DIST ON REG.CHILD_ORGANIZATION_ID = DIST.PARENT_ORGANIZATION_ID 
     WHERE DIST.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID) 
  END 
 FROM  
  [dbo].[RECRUITING_ORGANIZATION] RO WITH (NOLOCK) 
 WHERE  
  RO.ORGANIZATION_TYPE IN ('R', 'D', 'RS') 
END 
 
ELSE IF @OrgType = 'R'  
BEGIN 
 --- FOR Regions, INSERT DISTRICTS AND RSs INTO THE TEMP TABLE 
 INSERT INTO #ORG  
  (ORG_ID, ORG_TYPE, ASSIGNED_ORGANIZATION_ID)  
 SELECT 
  RO.ORGANIZATION_ID, RO.ORGANIZATION_TYPE,  
  CASE RO.ORGANIZATION_TYPE 
   WHEN 'D' THEN RO.ORGANIZATION_ID 
   ELSE (SELECT DIST.PARENT_ORGANIZATION_ID FROM [dbo].[ORGANIZATION_MAP] DIST WHERE DIST.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID) 
  END 
 FROM  
  [dbo].[RECRUITING_ORGANIZATION] RO WITH (NOLOCK) 
 WHERE  
  RO.ORGANIZATION_TYPE IN ('D', 'RS') 
END 
 
ELSE IF @OrgType = 'D'  
BEGIN 
 --- FOR Districts, INSERT RSs INTO THE TEMP TABLE 
 INSERT INTO #ORG  
  (ORG_ID, ORG_TYPE, ASSIGNED_ORGANIZATION_ID)  
 SELECT 
  RO.ORGANIZATION_ID, RO.ORGANIZATION_TYPE,  
  CASE RO.ORGANIZATION_TYPE 
   WHEN 'RS' THEN RO.ORGANIZATION_ID 
   ELSE (SELECT RS.PARENT_ORGANIZATION_ID FROM [dbo].[ORGANIZATION_MAP] RS WHERE RS.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID) 
  END 
 FROM  
  [dbo].[RECRUITING_ORGANIZATION] RO WITH (NOLOCK) 
 WHERE  
  RO.ORGANIZATION_TYPE IN ('RS') 
END 
 
ELSE 
BEGIN 
 --- FOR OTHER ORG TYPES, INSERT THE CHILD ORG IDs INTO THE TEMP TABLE  
 INSERT INTO #ORG  
  (ORG_ID, ORG_TYPE, ASSIGNED_ORGANIZATION_ID)  
 SELECT 
  RO.ORGANIZATION_ID, RO.ORGANIZATION_TYPE, RO.ORGANIZATION_ID 
 FROM  
  [dbo].[RECRUITING_ORGANIZATION] RO WITH (NOLOCK) INNER JOIN [dbo].[ORGANIZATION_MAP] OM ON  
   (OM.PARENT_ORGANIZATION_ID = @Recrui.ngOrgID AND 
   OM.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID) 
END 
 
--- RETURN THE DATA 
SELECT  
 O.ASSIGNED_ORGANIZATION_ID AS AssignedOrgID, 
 PP.PERIOD_CODE AS PeriodCode,  
 PP.BEGIN_DATE As BeginDate,  
 PP.END_DATE As EndDate, 
 COUNT(PA.PROGRAM_AVAILABILITY_ID) AS Total, 
 COUNT(CASE WHEN PA.CONTRACT_ID IS NOT NULL OR PA.NWA_ID IS NOT NULL THEN PA.PROGRAM_AVAILABILITY_ID END) AS Assigned 
FROM  
 #ORG O INNER JOIN [dbo].[PROGRAM_AVAILABILITY] PA ON  
  (PA.PROGRAM_ID = @ProgramID AND  
  O.ORG_ID = PA.ASSIGNED_ORGANIZATION_ID AND 
  PA.PROGRAM_AVAILABILITY_ID NOT IN (SELECT PROGRAM_AVAILABILITY_ID FROM [dbo].[REMOVED_PROGRAMS])) 
 INNER JOIN [dbo].[PROGRAM_PERIOD] PP ON  
  (PA.PROGRAM_PERIOD_ID = PP.PROGRAM_PERIOD_ID AND 
  PP.FY = @FiscalYear) 
GROUP BY  
 O.ASSIGNED_ORGANIZATION_ID, PP.PERIOD_CODE, PP.BEGIN_DATE, PP.END_DATE 
 
--- CLEAN UP  
DROP TABLE #ORG  
SET NOCOUNT OFF]]></body>
<schema>72379847-5555-B149-4E45-17F849103A51</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>