<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[InsertUpdateTimeSheetWeekly]" directorySegmentName="seg_8" id="9AEF0AA6-A2BD-51C5-DEDA-82EAAB858729">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:41:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@OrgID int, 
 @RecruiterID uniqueidentifier, 
 @FiscalYear int, 
 @Month int, 
 @Week int, 
 @TotalHours int, 
 @Remarks varchar(5000), 
 @LastUpdatedBy uniqueidentifier 
 
AS 
BEGIN 
 
 -- STEP 1: Start the transac.on 
 BEGIN TRANSACTION 
  
 DECLARE @CalendarYear int 
 
 IF @Month = 10 OR @Month = 11 OR @Month = 12 
 BEGIN 
  SET @CalendarYear = @FiscalYear - 1 
 END 
 ELSE 
 BEGIN 
  SET @CalendarYear = @FiscalYear 
 END 
 
 DECLARE @Objec.veWeekID uniqueidentifier 
 
 SELECT @Objec.veWeekID = ID FROM  
 ( SELECT 
   ROW_NUMBER() OVER (ORDER BY startdate) AS WeekNumber, 
  * FROM USMC.Objec.veWeek 
  WHERE  
   OrgID = @OrgID and year = @CalendarYear 
   and month = @Month 
 ) AS ObjWeek 
 WHERE WeekNumber = @Week 
 
 IF @Objec.veWeekID IS NOT NULL 
 BEGIN 
  IF EXISTS( SELECT [ID] FROM [USMC].[TimeSheetWeekly] 
     WHERE  
     RecruiterID = @RecruiterID 
     AND Objec.veWeekID = @Objec.veWeekID ) 
  BEGIN 
   UPDATE [USMC].[TimeSheetWeekly] 
   SET  
    TotalHours =  @TotalHours, 
    Remarks =  @Remarks, 
    LastUpdateDate =  GETDATE(), 
    LastUpdatedBy =  @LastUpdatedBy 
   WHERE 
    RecruiterID = @RecruiterID AND 
    Objec.veWeekID = @Objec.veWeekID  
  END 
  ELSE 
  BEGIN 
   INSERT INTO [RSSOSS].[USMC].[TimeSheetWeekly] 
      ([ID] 
      ,[RecruiterID] 
      ,[Objec.veWeekID] 
      ,[TotalHours] 
      ,[Remarks] 
      ,[LastUpdateDate] 
      ,[LastUpdatedBy]) 
   VALUES 
      (NEWID(), 
    @RecruiterID, 
    @Objec.veWeekID, 
    @TotalHours, 
    @Remarks, 
    GETDATE(), 
    @LastUpdatedBy) 
  END 
 
 END 
  
 
 -- Rollback the transac.on if there were any errors 
 IF @@ERROR <> 0 
 BEGIN 
  -- Rollback the transac.on 
  ROLLBACK TRANSACTION 
 
  -- Raise an error and return 
  RAISERROR ('Error occurred while performing the change.', 16, 1) 
  RETURN 
 END 
 
 -- Rollback the transac.on if the number of rows changed does not meet our expecta.on... 
 IF @@ROWCOUNT > 1 
 BEGIN 
  -- Rollback the transac.on 
  ROLLBACK TRANSACTION 
 
  -- Raise an error and return 
  RAISERROR ('An unexpected number of rows were changed.', 16, 1) 
  RETURN 
 END 
  
 -- STEP 4: If we reach this point, the commands completed successfully 
 --         Commit the transac.on.... 
 COMMIT TRANSACTION 
  
END]]></body>
<schema>A5B5C85F-7BA3-158E-D5A2-943767AC9AE2</schema>
<database>7220F1F8-DA6B-58D6-61AE-B77688E1C655</database>
</StoredProcedureSqlServerv2k5>