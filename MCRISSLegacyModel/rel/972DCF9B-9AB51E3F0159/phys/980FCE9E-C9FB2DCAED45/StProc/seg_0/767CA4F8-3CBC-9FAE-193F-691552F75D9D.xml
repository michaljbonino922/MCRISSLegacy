<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[spFindTransactionToRollback]" directorySegmentName="seg_0" id="767CA4F8-3CBC-9FAE-193F-691552F75D9D">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:09 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@ROLLBACK_ID int 
AS 
 
 
declare @SSN varchar(9), @MIRS_IMPORT_ID int, @FOURK varchar(4000), @TRANSACTION_TYPE varchar(2), @IMPORT_TRANSACTION varchar(1) 
declare @INDICATOR char(1), @MIRS_TRANSACTION varchar(5), @UPDATE_TRANSACTION_TYPE varchar(2), @UPDATEFOUND char(1), @ROLLBACK_COUNT int 
declare @CURRENT_ROW int, @LAST_TRANSACTION varchar(5), @FIRST_TRANSACTION varchar(5) 
declare @ROLLBACK_SEQUENCE_BROKEN char(1) 
declare @ROLLBACK_SEQUENCE_STARTED char(1) 
 
DECLARE @TransactionYear int 
 
--- GET SSN 
SELECT @SSN = SSN FROM MIRS_IMPORT_LOG WHERE MIRS_IMPORT_ID = @ROLLBACK_ID 
 
--- Get all transactions that came before rollback. Do not include any transactions  
--- that came in after the request nor the request itself. 
DECLARE ROLLBACK_CURSOR CURSOR FOR   
SELECT  
 MIL.MIRS_IMPORT_ID, MIL.FOURK, MTL.TRANSACTION_TYPE, MTL.IMPORT_TRANSACTION, MTL.MIRS_TRANSACTION 
FROM  
 MIRS_IMPORT_LOG MIL, MIRS_TRANSACTION_LOOKUP MTL 
WHERE  
 MIL.SSN = @SSN AND 
 MIL.MIRS_TRANSACTION = MTL.MIRS_TRANSACTION AND 
 MIL.MIRS_IMPORT_ID < @ROLLBACK_ID 
ORDER BY  
 MIL.MIRS_IMPORT_ID DESC 
 
 
--- PRINT 'Opening Rollback Cursor'   
 
--- INITIALIZE VARIABLES 
SELECT 
 @UPDATEFOUND = 'N', 
 @ROLLBACK_COUNT = 0, 
 @CURRENT_ROW = 1, 
 @LAST_TRANSACTION = NULL, 
 @ROLLBACK_SEQUENCE_STARTED = 'N', 
 @ROLLBACK_SEQUENCE_BROKEN = 'Y', 
 @TransactionYear = NULL 
 
--- OPEN CURSOR 
OPEN ROLLBACK_CURSOR   
FETCH  
 ROLLBACK_CURSOR  
INTO  
 @MIRS_IMPORT_ID , @FOURK , @TRANSACTION_TYPE , @IMPORT_TRANSACTION, @MIRS_TRANSACTION 
 
--- LOOP THROUGH CURSOR 
WHILE (@@FETCH_STATUS = 0)   
BEGIN           
 --- PRINT 'Current Row = ' + CONVERT(VARCHAR(10),@CURRENT_ROW) 
 --- PRINT 'Rollback Count = ' + CONVERT(VARCHAR(10),@ROLLBACK_COUNT) 
 
 IF (@CURRENT_ROW = 1 AND @MIRS_TRANSACTION = 'R000R')  
 BEGIN 
  PRINT 'First Tran is Rollback' 
  SELECT 
   @ROLLBACK_SEQUENCE_STARTED = 'Y',  
   @ROLLBACK_SEQUENCE_BROKEN = 'N' 
 END 
 
 
 IF (@MIRS_TRANSACTION = 'R000R' AND @ROLLBACK_SEQUENCE_STARTED = 'Y' AND @ROLLBACK_SEQUENCE_BROKEN = 'N')  
 BEGIN 
  PRINT 'Found Rollback Increment By 1' 
  SET @ROLLBACK_COUNT = @ROLLBACK_COUNT + 1 
 END 
 
 
 IF (@MIRS_TRANSACTION != 'R000R')  
 BEGIN 
  PRINT 'Rollback sequence broken' 
  SET @ROLLBACK_SEQUENCE_BROKEN = 'Y' 
 END 
 
 
 IF (@ROLLBACK_SEQUENCE_STARTED = 'Y' AND @ROLLBACK_SEQUENCE_BROKEN = 'Y')  
 BEGIN 
  PRINT 'Rollback sequence started and Rollback sequence broken' 
  SET @ROLLBACK_COUNT = @ROLLBACK_COUNT - 1 
 END 
 
 IF (@MIRS_TRANSACTION IN ('T000T') AND @UPDATEFOUND = 'N' AND @ROLLBACK_SEQUENCE_BROKEN = 'Y' AND @ROLLBACK_COUNT = 0)   
 BEGIN 
  SET @INDICATOR = 'R' 
  BREAK 
 END 
   
 --- The first transaction that was found is the transaction to rollback 
 IF (@IMPORT_TRANSACTION = 'N' AND @UPDATEFOUND = 'N' AND @ROLLBACK_COUNT = 0 AND @ROLLBACK_SEQUENCE_BROKEN = 'Y')  
 BEGIN 
  SET @INDICATOR = 'I' 
  BREAK 
 END 
 
 IF (@TRANSACTION_TYPE IN ('P','E') AND @UPDATEFOUND = 'N' AND @ROLLBACK_COUNT = 0 AND @ROLLBACK_SEQUENCE_BROKEN = 'Y')  
 BEGIN 
  SET @INDICATOR = 'R' 
  BREAK 
 END 
 
 IF (SUBSTRING(@MIRS_TRANSACTION, 1, 1) = 'B' AND @UPDATEFOUND = 'N' AND @ROLLBACK_COUNT = 0 AND @ROLLBACK_SEQUENCE_BROKEN = 'Y')  
 BEGIN 
  SET @INDICATOR = 'D' 
  BREAK 
 END 
 
 
 IF (@UPDATEFOUND = 'Y' AND @UPDATE_TRANSACTION_TYPE = @TRANSACTION_TYPE AND @ROLLBACK_SEQUENCE_BROKEN = 'Y') BEGIN 
  --- WE FOUND THE SECOND TRANSACTION OF THE SAME TYPE 
  PRINT 'FOUND SECOND TRAN THAT CORRESPONDS WITH UPDATE' 
  SET @INDICATOR = 'R' 
  BREAK 
 END   
 
 
 IF (SUBSTRING(@MIRS_TRANSACTION, 1, 1) = 'J' AND @UPDATEFOUND = 'N' AND @ROLLBACK_COUNT = 0 AND @ROLLBACK_SEQUENCE_BROKEN = 'Y')  
 BEGIN 
  --- THIS IS AN UPDATE TRANSACTION AND IT IS THE FIRST ONE WE FOUND 
  --- NOW WE NEED TO FIND THE NEXT TRANSACTION OF THE SAME TYPE 
  PRINT 'TRANSACTION IS AN UPDATE.  NEED TO FIND NEXT OF SAME TYPE' 
  SET @UPDATEFOUND = 'Y' 
  SET @UPDATE_TRANSACTION_TYPE = @TRANSACTION_TYPE 
 END 
 
 --- PRINT @MIRS_TRANSACTION 
 --- PRINT 'INDICATOR IS ' + COALESCE(@INDICATOR, 'NULL') 
  
 SET @LAST_TRANSACTION = @MIRS_TRANSACTION   
 SET @CURRENT_ROW = @CURRENT_ROW + 1 
 
 FETCH ROLLBACK_CURSOR INTO @MIRS_IMPORT_ID, @FOURK, @TRANSACTION_TYPE, @IMPORT_TRANSACTION, @MIRS_TRANSACTION 
END    
 
--- CLEAN UP 
PRINT 'CLOSE CURSOR' 
CLOSE ROLLBACK_CURSOR   
 
PRINT 'DEALLOCATE CURSOR' 
DEALLOCATE ROLLBACK_CURSOR   
 
 
PRINT @TRANSACTION_TYPE + @MIRS_TRANSACTION 
 
IF (@INDICATOR = 'I')  
BEGIN 
 --- RETURN NULL FOR ROLLBACK YEAR IF WE'RE IGNORING THE TRANSACTION 
 SELECT  
  NULL MIRS_IMPORT_ID, NULL FOURK, @TRANSACTION_TYPE TRANSACTION_TYPE, 'IGNORE' INDICATOR,  
  NULL AS ROLLBACK_YEAR 
 RETURN 
END 
 
IF (@INDICATOR = 'R')  
BEGIN 
 --- GET THE TRANSACTION YEAR FOR ROLLBACKS 
 SELECT  
  @TransactionYear = CASE ISNUMERIC(SUBSTRING(MIL.FILE_NAME, 10, 4)) 
     WHEN 1 THEN CONVERT(INT, SUBSTRING(MIL.FILE_NAME, 10, 4))  
     ELSE YEAR(GETDATE())   
     END 
 FROM  
  MIRS_IMPORT_LOG MIL  
 WHERE  
  MIL.MIRS_IMPORT_ID = @MIRS_IMPORT_ID 
 
 
 SELECT  
  @MIRS_IMPORT_ID MIRS_IMPORT_ID, @FOURK FOURK, @TRANSACTION_TYPE TRANSACTION_TYPE, 'REPROCESS' INDICATOR, 
  @TransactionYear AS ROLLBACK_YEAR 
 
 RETURN 
END  
 
IF (@INDICATOR = 'D')  
BEGIN 
 --- GET THE TRANSACTION YEAR FOR DELETES 
 SELECT  
  @TransactionYear = CASE ISNUMERIC(SUBSTRING(MIL.FILE_NAME, 10, 4)) 
     WHEN 1 THEN CONVERT(INT, SUBSTRING(MIL.FILE_NAME, 10, 4))  
     ELSE YEAR(GETDATE())   
     END 
 FROM  
  MIRS_IMPORT_LOG MIL  
 WHERE  
  MIL.MIRS_IMPORT_ID = @MIRS_IMPORT_ID 
 
 
 SELECT  
  @MIRS_IMPORT_ID MIRS_IMPORT_ID, @FOURK FOURK, @TRANSACTION_TYPE TRANSACTION_TYPE, 'DELETE' INDICATOR, 
  @TransactionYear AS ROLLBACK_YEAR   
 RETURN 
 
END  
 
 
--- THE INDICATOR HAS NOT BEEN SET 
--- RETURN NULL FOR ROLLBACK YEAR 
 
SELECT  
 NULL MIRS_IMPORT_ID, NULL FOURK, NULL TRANSACTION_TYPE, 'ERROR' INDICATOR,  
 NULL AS ROLLBACK_YEAR]]></body>
<schema>DD6CF638-A2EB-2E1B-FF13-422CA718DE2D</schema>
<database>24B9F7BA-5DD4-EAB5-4EB1-35B911743E85</database>
</StoredProcedureSqlServerv2k5>