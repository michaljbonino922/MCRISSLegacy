<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_ODSE_UpdatePSRFromBridge_1_12_18]" directorySegmentName="seg_12" id="559FC764-B5C1-430A-2CFC-CE915A69B655">
<sourceDDLFile>create ODSE script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:42:37 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[AS 
 
declare @varNewPersonID uniqueiden..er 
declare @varNewRecruitID uniqueiden..er 
declare @varNewLeadID uniqueiden..er 
DECLARE @varNewRecruiterID uniqueiden..er  
declare @FirstName varchar(15) 
declare @LastName varchar(15) 
declare @TenDigitSSN varchar(10) 
declare @MiddleInit varchar(1) 
declare @DateOfBirth date.me 
declare @Gender varchar(1) 
declare @PrimaryMOS varchar(4) 
declare @PayGrade varchar(2) 
declare @ReenlistCode varchar(2) 
declare @ReserveECC date.me 
declare @EAS date.me 
declare @PresentRUC varchar(5) 
declare @ReserveRUC varchar(5) 
declare @HomePhone varchar(20) 
declare @Email varchar(255) 
declare @Address1 varchar(50) 
 
--Added to get current address info 
declare @CurrentCityCode varchar(4) 
declare @CurrentStateCode varchar(2) 
declare @CurrentCountyCode varchar(3) 
declare @CityCode varchar(4) 
declare @CountyCode varchar(3) 
declare @StateCountryCode varchar(2) 
declare @ZipCode varchar(9) 
declare @DateOfRank date.me 
declare @Addi.onalMOS1 varchar(4) 
declare @Addi.onalMOS2 varchar(4) 
declare @PMCC varchar(3) 
declare @RMCC varchar(3) 
declare @NOKPhone varchar(20) 
declare @MaritalStatus varchar(1) 
declare @NumberOfDependents int 
declare @DropUnitDischargeDate date.me 
declare @ASVAB_GT int 
declare @ASVAB_MM int 
declare @ASVAB_CL int 
declare @ASVAB_EL int 
declare @ComponentCode varchar(2) 
declare @ConductAvgService .oat 
declare @Pro.ciencyAvgService .oat 
declare @DateCRCRCer..ca.on date.me 
declare @SatYears int 
declare @TotalRe.rementPoints int 
declare @DateArmedForcesAc.veDutyBase date.me 
declare @DatePayEntryBase date.me 
declare @Separa.onCode varchar(4) 
declare @DateMostCurrentPhysical date.me 
 
-- Recruiter speci.c 
DECLARE @varCurrentRecruiterOrgID int 
DECLARE @varCurrentRecruiterPSRSID int 
DECLARE @varNewRecruiterOrgID int 
DECLARE @varNewRecruiterPSRSID int 
DECLARE @BilletMOS varchar(4) 
DECLARE @CurrentTourBeginDate date.me 
DECLARE @varOldBilletID int 
DECLARE @varOldBilletBeginDate date.me 
DECLARE @varOldBilletEndDate date.me 
DECLARE @varNewBilletID int 
DECLARE @varRankID int 
DECLARE @varCurrentProduc.onStatusHistoryID uniqueiden..er 
 
--for joins and atrits 
declare @ApplicantPackageID uniqueiden..er 
declare @ReserveRSC varchar(1) 
declare @JoinDate date.me 
declare @JoinCreditDate date.me 
declare @ReserveComponentCode varchar(2) 
 
--For history and comparisons 
declare @varExis.ngLeadID uniqueiden..er 
declare @varExis.ngLeadPersonID uniqueiden..er 
declare @varExis.ngRecruiterID uniqueiden..er 
declare @varExis.ngRecruiterPersonID uniqueiden..er 
declare @varExis.ngStatusDisposi.onID int 
declare @OldStreet1 varchar(50) 
declare @OldStreet2 varchar(50) 
declare @OldCityID varchar(4) 
declare @OldCountyID varchar(3) 
declare @OldStateID varchar(2) 
declare @OldZipCode varchar(9) 
declare @OldCountryID varchar(2) 
declare @OldPrimaryPhone varchar(20) 
declare @OldNOK1Phone varchar(20) 
declare @OldComponentCode varchar(2) 
declare @NewLeadHistoryID uniqueiden..er 
declare @ODSEUserID uniqueiden..er 
 
declare @AtachedPSRSS int 
declare @StatusDisposi.onID int 
declare @IsARQSN bit 
declare @NineDigitSSN varchar(9) 
 
declare @counter int 
declare @moscount int 
declare @ruccount int 
declare @lastPSRLeadUpdateDate date.me 
declare @lastPSRRecruiterUpdateDate date.me 
declare @UpdateAllLeads bit 
 
if ((select max(UPDATE_DATE) from MUD_FILE) > (select max(LAST_UPDATED_BY_ODSE) from ODSE_BridgeToPSR)) 
 set @UpdateAllLeads = 1 
else 
 set @UpdateAllLeads = 0 
 
UPDATE OBTP 
SET OBTP.PSR_UPDATE_PENDING = 1 
FROM ODSE_BridgeToPSR OBTP 
JOIN PERSON P WITH (NOLOCK) 
 ON P.SSN = RIGHT(OBTP.SSN,9) 
JOIN RECRUIT R WITH (NOLOCK) 
 ON R.PERSONID = P.PERSONID 
JOIN RECRUITCURRENTLEAD RCL WITH (NOLOCK) 
 ON RCL.RECRUITID = R.RECRUITID 
JOIN APPLICANTPACKAGE AP WITH (NOLOCK) 
 ON AP.LEADID = RCL.LEADID 
JOIN LEADSTATUSDISPOSITION LSD WITH (NOLOCK) 
 ON LSD.LEADID = AP.LEADID 
WHERE (StatusDisposi.onID IN (22,30,31,32,33) )  
 OR (StatusDisposi.onID IN (28,37) AND DATEDIFF(DAY,DateJoinCredit,getdate()) BETWEEN 0 AND 90) 
 
declare cu_odsedata cursor fast_forward for 
SELECT  OBTP..rst_name 
  ,OBTP.last_name 
  ,OBTP.ssn 
  ,OBTP.middle_ini.al 
  ,OBTP.date_of_birth 
  ,OBTP.sex 
  ,OBTP.BILLET_MOS_CODE 
  ,OBTP.primary_mos_code 
  ,OBTP.present_grade_code 
  ,OBTP.reenlist_recommenda.on_code 
  ,OBTP.reserve_exp_current_contract 
  ,OBTP.expira.on_of_ac.ve_service 
  ,OBTP.present_repor.ng_unit_code 
  ,OBTP.reserve_repor.ng_unit_code 
  ,OBTP.home_telephone_number 
  ,OBTP.electronic_mail_address_text 
  ,OBTP.street_address 
  ,OBTP.home_of_record_city_code 
  ,OBTP.home_of_record_county 
  ,OBTP.home_of_record_state_country 
  ,OBTP.zip_code 
  ,OBTP.present_rank_date 
  ,OBTP.addl_.rst_mos_code 
  ,OBTP.addl_second_mos_code 
  ,OBTP.present_monitored_command_code 
  ,OBTP.RESERVE_MONITORED_COMMAND_CODE 
  ,OBTP.nok_telephone1 
  ,OBTP.marital_status_code 
  ,OBTP.number_of_dependents 
  ,OBTP.drop_discharge_unit_date 
  ,OBTP.asvab_comp_general_tech 
  ,OBTP.asvab_comp_mech_maint 
  ,OBTP.asvab_comp_clerical 
  ,OBTP.asvab_comp_electronics 
  ,OBTP.reserve_unit_join_date 
  ,OBTP.reserve_record_status_code 
  ,OBTP.component_code 
  ,OBTP.conduct_average_service 
  ,OBTP.pro.ciency_average_service 
  ,MF.CITY_CODE 
  ,MF.STATE_CODE 
  ,MF.COUNTY_CODE 
  ,OBTP.CRCR_CERTIFICATION_DATE 
  ,OBTP.ALMRS_TOTAL_SATISFACTORY_YEAR 
  ,OBTP.TOTAL_CAREER_RETIREMENT_POINTS 
  ,OBTP.ALMRS_ARMED_FORCES_ACT_DU_BASE_DATE 
  ,OBTP.PAY_ENTRY_BASE_DATE 
  ,OBTP.SEPARATION_CODE 
  ,OBTP.DATE_OF_LAST_PHYSICAL 
  ,OBTP.RESERVE_COMPONENT_CODE 
  ,OBTP.CURRENT_TOUR_BEGIN_DATE 
FROM ODSE_BridgeToPSR OBTP 
LEFT OUTER JOIN MUD_FILE MF ON (LEFT(OBTP.ZIP_CODE,5) = MF.ZIP AND LEN(MF.CITY_CODE) < 5) 
WHERE PSR_UPDATE_PENDING = 1  
 OR @UpdateAllLeads = 1 
 
set @ODSEUserID = '7246835e-d639-47a8-9166-b7072b.768e' 
set @counter = 0 
 
open cu_odsedata 
fetch next from cu_odsedata into  @FirstName 
         ,@LastName 
         ,@TenDigitSSN 
         ,@MiddleInit 
         ,@DateOfBirth 
         ,@Gender 
         ,@BilletMOS 
         ,@PrimaryMOS 
         ,@PayGrade 
         ,@ReenlistCode 
         ,@ReserveECC 
         ,@EAS 
         ,@PresentRUC 
         ,@ReserveRUC 
         ,@HomePhone 
         ,@Email 
         ,@Address1 
         ,@CityCode 
         ,@CountyCode 
         ,@StateCountryCode 
         ,@ZipCode 
         ,@DateOfRank 
         ,@Addi.onalMOS1 
         ,@Addi.onalMOS2 
         ,@PMCC 
         ,@RMCC 
         ,@NOKPhone 
         ,@MaritalStatus 
         ,@NumberOfDependents 
         ,@DropUnitDischargeDate 
         ,@ASVAB_GT 
         ,@ASVAB_MM 
         ,@ASVAB_CL 
         ,@ASVAB_EL 
         ,@JoinDate 
         ,@ReserveRSC 
         ,@ComponentCode 
         ,@ConductAvgService 
         ,@Pro.ciencyAvgService 
         ,@CurrentCityCode 
         ,@CurrentStateCode 
         ,@CurrentCountyCode 
         ,@DateCRCRCer..ca.on 
         ,@SatYears 
         ,@TotalRe.rementPoints 
         ,@DateArmedForcesAc.veDutyBase 
         ,@DatePayEntryBase 
         ,@Separa.onCode 
         ,@DateMostCurrentPhysical 
         ,@ReserveComponentCode 
         ,@CurrentTourBeginDate 
WHILE (@@fetch_status = 0) 
BEGIN 
 SET @varExis.ngLeadID = null 
 SET @varExis.ngLeadPersonID = null 
 SET @varExis.ngStatusDisposi.onID = null 
 SET @NineDigitSSN = right('0' + @TenDigitSSN, 9) 
 SET @varNewPersonID = NULL 
 SET @varOldBilletID = NULL 
 SET @varOldBilletBeginDate = NULL 
 SET @varOldBilletEndDate = NULL 
 SET @IsARQSN = 0 
  
 --for inserts and updates, we need the lookup tables updated with all values from ODSE 
    SET @moscount = (SELECT COUNT(MOSID) FROM MOS WHERE descrip.on=@PrimaryMOS) 
    IF @moscount = 0 and @PrimaryMOS is not NULL 
      INSERT INTO MOS (Descrip.on, IsAc.ve) values (@PrimaryMOS, 1) 
    SET @moscount = (SELECT COUNT(MOSID) FROM MOS WHERE descrip.on=@Addi.onalMOS1) 
    IF @moscount = 0 and @Addi.onalMOS1 is not NULL 
      INSERT INTO MOS (Descrip.on, IsAc.ve) values (@Addi.onalMOS1, 1) 
    SET @moscount = (SELECT COUNT(MOSID) FROM MOS WHERE descrip.on=@Addi.onalMOS2) 
    IF @moscount = 0 and @Addi.onalMOS2 is not NULL 
      INSERT INTO MOS (Descrip.on, IsAc.ve) values (@Addi.onalMOS2, 1) 
    SET @ruccount = (SELECT COUNT(RUCID) FROM RUC WHERE descrip.on=@PresentRUC) 
    IF @ruccount = 0 and @PresentRUC is not NULL 
      INSERT INTO RUC (Descrip.on) values (@PresentRUC) 
    SET @ruccount = (SELECT COUNT(RUCID) FROM RUC WHERE descrip.on=@ReserveRUC) 
    IF @ruccount = 0 and @ReserveRUC is not NULL 
      INSERT INTO RUC (Descrip.on) values (@ReserveRUC) 
 --cleanup of codes 
 SET @CityCode = right('0000' + cast(@CityCode as varchar(4)),4) 
 Set @CountyCode = right('000' + cast(@CountyCode as varchar(3)),3) 
 
 --Find PSRSS from MUD .le.  If not there, set default 
 SET @AtachedPSRSS = NULL 
 SET @AtachedPSRSS = (SELECT AssignedPSRSSOrgID FROM MUD_FILE where ZIP = SUBSTRING(@ZipCode, 1, 5)) 
 --Note that Unatached PSRSS means they will go to the Unatached Leads table 
 
 if @Separa.onCode like '8%' 
  set @StatusDisposi.onID = 16 --Unworkable/Deceased 
 else if @EAS > GETDATE() 
  set @StatusDisposi.onID = 2 --Unassigned/Ac.ve Component 
 else 
  set @StatusDisposi.onID = 3 --Unassigned/Other Leads 
 
    select @varExis.ngLeadID = lead.LeadID, @varExis.ngLeadPersonID = person.PersonID, 
   @lastPSRLeadUpdateDate = lead.LastChangedByPSR 
  from lead, recruit, recruitcurrentlead, person 
   where lead.recrui.d = recruit.recrui.d 
   and recruitcurrentlead.recrui.d = recruit.recrui.d 
   and recruitcurrentlead.leadid = lead.leadid 
   and recruit.personid = person.personid 
   and person.ssn = @NineDigitSSN 
 
--if a lead is exis.ng and newly unatached, do not alter the AtachedPSRSS 
 if @varExis.ngLeadID is not NULL and @AtachedPSRSS IS NULL 
  set @AtachedPSRSS = (SELECT AtachedPSRSSID from Lead where leadid = @varExis.ngLeadID) 
 
--update lead if exis.ng 
 IF @varExis.ngLeadID is not NULL  
  BEGIN 
   select @varExis.ngStatusDisposi.onID = lsd.StatusDisposi.onID 
    from leadstatusdisposi.on lsd 
    where lsd.leadid = @varExis.ngLeadID 
 
   print 'upda.ng SSN ' + @NineDigitSSN 
 
   --Always update when the lead is deceased 
   IF @StatusDisposi.onID = 16 
    BEGIN 
     print 'upda.ng deceased lead' 
     update [dbo].[LeadStatusDisposi.on] 
      set StatusDisposi.onID = @StatusDisposi.onID, DateUpdated = GETDATE() 
      where LeadID = @varExis.ngLeadID 
     update [dbo].[Lead] 
      set Veri.edUnworkable_UserID = @ODSEUserID, Veri.edUnworkable_Date = GETDATE() 
      where LeadID = @varExis.ngLeadID 
    END 
   ELSE  
    BEGIN 
     --If not deceased, only update if NOT marked as changed by PSR within the last 90 days 
     IF @lastPSRLeadUpdateDate is NULL or @lastPSRLeadUpdateDate < GETDATE() - 90 
     BEGIN  
      print 'changing lead based on ODSE data' 
      --Person 
      update [dbo].[Person] 
       set FirstName = @FirstName, LastName=@LastName, MiddleName=@MiddleInit, DateOfBirth = @DateOfBirth 
       where PersonID = @varExis.ngLeadPersonID 
 
      --Lead 
      update [dbo].[Lead] 
      set  PrimaryMOSID = (select MOSID from MOS where descrip.on=@PrimaryMOS) 
       ,PayGradeID = (select PayGradeID from PayGrade where descrip.on=@PayGrade) 
       ,ReEnlistmentCode = @ReenlistCode 
       ,DateRECC = @ReserveECC 
       ,DateEndAc.veService = @EAS 
       ,PresentRUCID = (select RUCID from RUC where descrip.on=@PresentRUC) 
       ,ReserveRUCID = (select RUCID from RUC where descrip.on=@ReserveRUC) 
       ,DOR = @DateOfRank 
       ,AddtlMOSID1 = (select MOSID from MOS where descrip.on=@Addi.onalMOS1) 
       ,AddtlMOSID2 = (select MOSID from MOS where descrip.on=@Addi.onalMOS2) 
       ,MCC = @PMCC 
       ,Gender = @Gender 
       ,MaritalStatusID = (select MaritalStatusID from MaritalStatus where Code=@MaritalStatus) 
       ,NumberDependents = @NumberOfDependents 
       ,DropDischargeUnitDate = @DropUnitDischargeDate 
       ,AtachedPSRSSID = @AtachedPSRSS 
       ,ComponentCode = @ComponentCode 
       ,ConductAvgService = @ConductAvgService 
       ,Pro.ciencyAvgService = @Pro.ciencyAvgService 
       ,DateCRCRCer..ca.on = @DateCRCRCer..ca.on 
       ,SatYears = @SatYears 
       ,TotalRe.rementPoints =  @TotalRe.rementPoints 
       ,DateArmedForcesAc.veDutyBase = @DateArmedForcesAc.veDutyBase 
       ,DatePayEntryBase = @DatePayEntryBase 
       ,Separa.onCode = @Separa.onCode 
       ,DateMostCurrentPhysical = @DateMostCurrentPhysical 
       where LeadID = @varExis.ngLeadID 
 
      --Email 
      update [dbo].[EmailAddress] 
       set Email = @Email, DateUpdated=GETDATE() 
       where LeadID = @varExis.ngLeadID and EmailAddressTypeID = 1 
 
      --Address 
      SELECT @OldStreet1 = Street1, @OldStreet2 = Street2, @OldCityID = CityID, @OldStateID = StateID, 
       @OldCountyID = CountyID, @OldZipCode = ZipCode, @OldCountryID = CountryID 
      FROM Address 
      WHERE [LeadID] = @varExis.ngLeadID 
      --Changed address assignment to use current address **JOHN DEPRATO** 
      IF (NULLIF(@OldStreet1,@Address1) IS NOT NULL OR NULLIF(@Address1,@OldStreet1) IS NOT NULL) OR 
       (NULLIF(@OldCityID,@CurrentCityCode) IS NOT NULL OR NULLIF(@CurrentCityCode,@OldCityID) IS NOT NULL) OR 
       (NULLIF(@OldStateID,@CurrentStateCode) IS NOT NULL OR NULLIF(@CurrentStateCode,@OldStateID) IS NOT NULL) OR 
       (NULLIF(@OldCountyID,@CurrentCountyCode) IS NOT NULL OR NULLIF(@CurrentCountyCode,@OldCountyID) IS NOT NULL) OR 
       (NULLIF(@OldZipCode,@ZipCode) IS NOT NULL OR NULLIF(@ZipCode,@OldZipCode) IS NOT NULL) 
      BEGIN 
       update [dbo].[Address] 
        set Street1 = @Address1, Street2 = NULL, CityID = @CurrentCityCode, StateID = @CurrentStateCode, 
          CountyID = @CurrentCountyCode, CountryID = @StateCountryCode, ZipCode = @ZipCode 
        where LeadID = @varExis.ngLeadID 
 
       INSERT INTO AddressHistory(AddressHistoryID, LeadID, Street1, Street2, CityID, StateID, 
        CountyID, ZipCode, CountryID, ChangeDate, UserID) 
       VALUES(NEWID(), @varExis.ngLeadID, @OldStreet1, @OldStreet2, @OldCityID, @OldStateID, 
        @OldCountyID, @OldZipCode, @OldCountryID, GETDATE(), @ODSEUserID) 
      END 
       
      --Phones 
      IF (NULLIF(@OldPrimaryPhone,@HomePhone) IS NOT NULL OR NULLIF(@HomePhone,@OldPrimaryPhone) IS NOT NULL) OR  
       (NULLIF(@OldNOK1Phone,@NOKPhone) IS NOT NULL OR NULLIF(@NOKPhone,@OldNOK1Phone) IS NOT NULL) OR 
       (NULLIF(@OldComponentCode,@ComponentCode) IS NOT NULL OR NULLIF(@ComponentCode,@OldComponentCode) IS NOT NULL)  
      BEGIN 
       SELECT @NewLeadHistoryID = newid() 
       INSERT INTO LeadHistory(LeadHistoryID, UserID, ChangeDate, LeadID) 
       VALUES(@NewLeadHistoryID, @ODSEUserID, GetDate(), @varExis.ngLeadID) 
 
       --Primary Phone 
       IF (NULLIF(@OldPrimaryPhone,@HomePhone) IS NOT NULL OR NULLIF(@HomePhone,@OldPrimaryPhone) IS NOT NULL) 
       BEGIN 
        update [dbo].[LeadPhones] 
         set PrimaryPhone = @HomePhone 
         where LeadID = @varExis.ngLeadID 
        --INSERT INTO LeadHistoryLineItem(LeadHistoryLineItemID, ChangedField, OldValue, NewValue, LeadHistoryID) 
        --VALUES(NEWID(), 'PrimaryPhone', @OldPrimaryPhone, @HomePhone, @NewLeadHistoryID ) 
       END 
 
       --NOK1 Phone 
       IF (NULLIF(@OldNOK1Phone,@NOKPhone) IS NOT NULL OR NULLIF(@NOKPhone,@OldNOK1Phone) IS NOT NULL) 
       BEGIN 
        update [dbo].[LeadPhones] 
         set NOK1 = @NOKPhone 
         where LeadID = @varExis.ngLeadID 
        --INSERT INTO LeadHistoryLineItem(LeadHistoryLineItemID, ChangedField, OldValue, NewValue, LeadHistoryID) 
        --VALUES(NEWID(), 'NOK1', @OldNOK1Phone, @NOKPhone, @NewLeadHistoryID ) 
       END 
 
       --ComponentCode 
       --IF (NULLIF(@OldComponentCode,@ComponentCode) IS NOT NULL OR NULLIF(@ComponentCode,@OldComponentCode) IS NOT NULL) 
       --BEGIN 
       -- --INSERT INTO LeadHistoryLineItem(LeadHistoryLineItemID, ChangedField, OldValue, NewValue, LeadHistoryID) 
       -- --VALUES(NEWID(), 'ComponentCode', @OldComponentCode, @ComponentCode, @NewLeadHistoryID ) 
       --END 
      END 
 
      --LeadStatusDisposi.on 
      IF @varExis.ngStatusDisposi.onID in (2,3) 
       update [dbo].[LeadStatusDisposi.on] 
        set StatusDisposi.onID = @StatusDisposi.onID, DateUpdated = GETDATE() 
        where LeadID = @varExis.ngLeadID 
      --ASVAB 
      update [dbo].[ASVABResult] 
       set GT = @ASVAB_GT, EL = @ASVAB_EL, CL = @ASVAB_CL, MM = @ASVAB_MM 
       where LeadID = @varExis.ngLeadID 
 
     END 
 
     --Joins and Atrits 
     if @varExis.ngStatusDisposi.onID IN (22,30,31,32,33) --PendingJoin 
     BEGIN 
      print 'processing a pending join' 
      select @ApplicantPackageID = ap.ApplicantPackageid 
       from applicantpackage ap 
        where ap.leadid = @varExis.ngLeadID 
      print 'APPLICANTPACKAGEID: ' + CAST(@ApplicantPackageID AS VARCHAR(255)) 
      print 'VAR EXISTING LEAD: ' + CAST(@varExis.ngLeadID AS VARCHAR(255)) 
      print 'RESERVE RUC: ' + CAST(@ReserveRUC AS VARCHAR(255)) 
      print 'Reserve RSC: ' + CAST(@ReserveRSC AS VARCHAR(255)) 
      --if applicable, Credit the join 
      --verify RUC match and reserve-recstat 
      if (select RUCID from RUC where Descrip.on=@ReserveRUC)= 
       (select rru.RUCID from ApplicantPackage ap, QSN, RUCReserveUnit rru 
        where ap.QSNID = QSN.QSNID and QSN.RUCReserveUnitID = rru.RUCReserveUnitID and ap.ApplicantPackageID= @ApplicantPackageID) 
        and 
       @ReserveRSC in ('0','7','F') 
      BEGIN 
       PRINT 'JOINING LEAD' 
       --calculate Join Credit date 
       if (DATEPART(Month, GETDATE())=DATEPART(Month, @JoinDate) 
         and DATEPART(Year, GETDATE())=DATEPART(Year, @JoinDate)) 
        or 
        (DATEPART(Month, DATEADD(Day, -5, GETDATE()))=DATEPART(Month, @JoinDate) 
         and DATEPART(Year, DATEADD(Day, -5, GETDATE()))=DATEPART(Year, @JoinDate)) 
        set @JoinCreditDate = @JoinDate 
       else  
        set @JoinCreditDate = DATEADD(Day,-DAY(GETDATE())+1,GETDATE())   
 
       --credit the join 
       UPDATE ApplicantPackage  
       SET DateE.ec.ve=@JoinDate,  
        DateJoinCredit=@JoinCreditDate 
       WHERE ApplicantPackageID = @ApplicantPackageID 
        
       -- set as joins 
       IF (@varExis.ngStatusDisposi.onID = 22) 
       BEGIN 
        UPDATE LeadStatusDisposi.on  
        SET StatusDisposi.onID = 28,  
        DateUpdated = GETDATE() 
        WHERE LeadID = @varExis.ngLeadID 
       END 
        
       IF (@varExis.ngStatusDisposi.onID = 30) 
       BEGIN 
        UPDATE LeadStatusDisposi.on  
        SET StatusDisposi.onID = 34,  
        DateUpdated = GETDATE() 
        WHERE LeadID = @varExis.ngLeadID 
       END 
        
       IF (@varExis.ngStatusDisposi.onID = 31) 
       BEGIN 
        UPDATE LeadStatusDisposi.on  
        SET StatusDisposi.onID = 35,  
        DateUpdated = GETDATE() 
        WHERE LeadID = @varExis.ngLeadID 
       END        
               
       IF (@varExis.ngStatusDisposi.onID = 32) 
       BEGIN 
        UPDATE LeadStatusDisposi.on  
        SET StatusDisposi.onID = 36,  
        DateUpdated = GETDATE() 
        WHERE LeadID = @varExis.ngLeadID 
       END        
        
       IF (@varExis.ngStatusDisposi.onID = 33) 
       BEGIN 
        UPDATE LeadStatusDisposi.on  
        SET StatusDisposi.onID = 37,  
        DateUpdated = GETDATE() 
        WHERE LeadID = @varExis.ngLeadID 
       END        
      END  
     END 
 
     IF EXISTS(SELECT 
         ap.ApplicantPackageID 
         FROM ApplicantPackage ap 
         INNER JOIN QSN q ON ap.QSNID = q.QSNID 
         WHERE ap.LeadID = @varExis.ngLeadID 
         AND q.ApplicantPackageTypeID = 1  
         ) 
      SET @ISArQSN = 1 
     ELSE  
      SET @IsARQSN = 0 
       
     --if it's already a join, but the component code changes to K7 within 90 days, it's an atri.on 
     if (@varExis.ngStatusDisposi.onID IN (28, 37) 
      -- NEED TO ADD NEW Status/Disposi.ons here 
      AND GETDATE() < @JoinDate + 90  
      AND @ReserveComponentCode='K7' 
      AND @IsARQSN = 0) 
     BEGIN  
      print 'processing an atri.on' 
      UPDATE ap 
      SET DateAtri.on = GETDATE() 
      FROM ApplicantPackage ap 
      INNER JOIN QSN q ON ap.QSNID = q.QSNID 
      WHERE ap.LeadID = @varExis.ngLeadID      
       
      UPDATE LeadStatusDisposi.on  
      SET StatusDisposi.onID = 29,  
      DateUpdated = GETDATE() 
      WHERE LeadID = @varExis.ngLeadID 
      AND @varExis.ngStatusDisposi.onID = 28 
             
      UPDATE LeadStatusDisposi.on  
      SET StatusDisposi.onID = 38,  
      DateUpdated = GETDATE() 
      WHERE LeadID = @varExis.ngLeadID 
      AND @varExis.ngStatusDisposi.onID = 37 
     END 
    END 
  END 
 ELSE -- insert new lead 
  BEGIN 
 
  print 'inser.ng SSN ' + @NineDigitSSN 
 
--insert if it doesn't exist (and not deceased) 
  IF @StatusDisposi.onID <> 16 
   BEGIN 
    --if no PSRSS, it goes into the UnatachedLeads table 
    if @AtachedPSRSS is null 
     BEGIN 
      print 'going into UnatachedLeads' 
      delete from [dbo].[UnatachedLeads] where SSN=@NineDigitSSN 
      insert into [dbo].[UnatachedLeads] 
       (UnatachedLeadID, SSN, FirstName, LastName, MiddleName, 
        Street1, CityID, StateID, CountyID, ZipCode, Telephone, Email, 
        PrimaryMOSID, PayGradeID, DateRECC, DateEAS, PresentRUCID, ReserveRUCID) 
      select 
       NEWID(), @NineDigitSSN, @FirstName, @LastName, @MiddleInit, 
       --Changed address assignment to use current address **JOHN DEPRATO** 
       @Address1, right('0000' + cast(@CurrentCityCode as varchar(4)),4), @CurrentStateCode, right('000' + cast(@CurrentCountyCode as varchar(3)),3), @ZipCode, @HomePhone, @Email, 
       (select MOSID from MOS where descrip.on=@PrimaryMOS), (select PayGradeID from PayGrade where descrip.on=@PayGrade), @ReserveECC, @EAS, 
       (select RUCID from RUC where descrip.on=@PresentRUC), (select RUCID from RUC where descrip.on=@ReserveRUC) 
     END 
    else 
     BEGIN 
      -- has a PSRSS, so insert it into PSR as a lead 
      SET @varNewPersonID = (SELECT PersonID 
              FROM [dbo].Person 
              WHERE SSN = @NineDigitSSN) 
         IF (@varNewPersonID IS NOT NULL)          
         BEGIN 
       UPDATE [dbo].[Person] 
       SET PersonID = @varNewPersonID, FirstName = @FirstName, SSN = @NineDigitSSN, MiddleName = @MiddleInit, DateOfBirth = @DateOfBirth 
       WHERE SSN = @NineDigitSSN 
         END 
         ELSE 
         BEGIN 
       SET @varNewPersonID = NEWID()  
       INSERT INTO [dbo].[Person] 
       (PersonID, FirstName, LastName, SSN, MiddleName, DateOfBirth) 
       VALUES (@varNewPersonID, @FirstName, @LastName, @NineDigitSSN, @MiddleInit, @DateOfBirth)       
         END 
       
      select @varNewRecruitID = NEWID() 
      select @varNewLeadID = NEWID() 
      insert into [dbo].[Recruit] 
       (RecruitID, PersonID) 
      values (@varNewRecruitID, @varNewPersonID) 
      insert into [dbo].[Lead] (LeadID, RecruitID, PrimaryMOSID, PayGradeID, ReEnlistmentCode, DateRECC, DateEndAc.veService, PresentRUCID, ReserveRUCID, DOR, AddtlMOSID1, AddtlMOSID2, MCC, Gender, MaritalStatusID, NumberDependents, DropDischargeUnitDate, AtachedPSRSSID, ComponentCode, ConductAvgService, Pro.ciencyAvgService) 
       select @varNewLeadID, @varNewRecruitID, (select MOSID from MOS where descrip.on=@PrimaryMOS), (select PayGradeID from PayGrade where descrip.on=@PayGrade), @ReenlistCode, @ReserveECC, @EAS, (select RUCID from RUC where descrip.on=@PresentRUC), (select RUCID from RUC where descrip.on=@ReserveRUC), @DateOfRank, (select MOSID from MOS where descrip.on=@Addi.onalMOS1), (select MOSID from MOS where descrip.on=@Addi.onalMOS2), @PMCC, @Gender, (select MaritalStatusID from MaritalStatus where Code=@MaritalStatus), @NumberOfDependents, @DropUnitDischargeDate, @AtachedPSRSS, @ComponentCode, @ConductAvgService, @Pro.ciencyAvgService 
      insert into [dbo].[RecruitCurrentLead] (RecruitCurrentLeadID, RecruitID, LeadID) 
       select NEWID(), @varNewRecruitID, @varNewLeadID 
      insert into [dbo].[EmailAddress] (EmailAddressID, LeadID, EmailAddressTypeID, Email, DateUpdated, IsCurrent) 
       select NEWID(), @varNewLeadID, 1, @Email, GETDATE(), 1 
      --Changed address assignment to use current address **JOHN DEPRATO**  
      insert into [dbo].[Address] (AddressID, LeadID, Street1, CityID, StateID, CountyID, ZipCode) 
       select NEWID(), @varNewLeadID, @Address1, right('0000' + cast(@CurrentCityCode as varchar(4)),4), @CurrentStateCode, right('000' + cast(@CurrentCountyCode as varchar(3)),3), @ZipCode 
      insert into [dbo].[LeadPhones] (LeadPhonesID, LeadID, PrimaryPhone, SecondaryPhone, Ter.aryPhone, NOK1, NOK2) 
       select NEWID(), @varNewLeadID, @HomePhone, null, null, @NOKPhone, null 
      insert into [dbo].[LeadStatusDisposi.on] 
         (LeadStatusDisposi.onID, StatusDisposi.onID, LeadID, DateUpdated) 
       select NEWID(), @StatusDisposi.onID, @varNewLeadID, GETDATE() 
      insert into [dbo].[ASVABResult] (ASVABResultID, GT, MM, CL, EL, LeadID) 
       select NEWID(), @ASVAB_GT, @ASVAB_MM, @ASVAB_CL, @ASVAB_EL, @varNewLeadID 
     END 
   END 
   else 
   BEGIN 
    --remove any deceased records in UnatachedLeads 
    delete from [dbo].[UnatachedLeads] where SSN=@NineDigitSSN   
   END  
 END -- update lead 
 
 -- if recruiter, then update PSR recruiter info 
 IF (@ReserveRUC = '88850' AND @RMCC = 'ARP' AND (@BilletMOS = '8411' OR @BilletMOS = '8412')) 
 BEGIN   
  PRINT 'IS RECRUITER' 
  SET @varExis.ngRecruiterID = NULL 
  SET @varExis.ngRecruiterPersonID = NULL 
   
  SELECT @varExis.ngRecruiterID = r.RecruiterID,  
   @varExis.ngRecruiterPersonID = p.PersonID 
  FROM Recruiter r 
  INNER JOIN Person p ON p.PersonID = r.PersonID 
  WHERE p.SSN = @NineDigitSSN 
             
  -- is this organiza.on in the list of PSRSs? 
  SET @varNewRecruiterPSRSID = (SELECT PSROrgUnitID 
          FROM [dbo].[PSRSPSROrgUnit] 
          WHERE ODSE_PMCC = @PMCC 
          AND ODSE_PRUC = @PresentRUC) 
  PRINT 'PSRS org update: '  + CAST(@varNewRecruiterPSRSID AS VARCHAR(4)) 
   
  PRINT @PayGrade 
  SET @varRankID = (SELECT TOP 1 RankID 
          FROM dbo.Rank r 
          INNER JOIN dbo.PayGrade pg ON r.GradeID = pg.PayGradeID 
          WHERE pg.Descrip.on = @PayGrade            
          AND r.SpecialMOSID IS NULL) 
  PRINT @varRankID 
   
  -- is exis.ng recruiter 
  IF (@varExis.ngRecruiterID IS NOT NULL) 
  BEGIN 
   PRINT 'Update exis.ng recruiter' 
       
   DECLARE @varUpdateRecruiter BIT 
   SET @varUpdateRecruiter = 0   
  
   -- current org for recruiter 
   SET @varCurrentRecruiterOrgID = (SELECT Organiza.onID 
            FROM [dbo].[Recruiter] 
            WHERE RecruiterID = @varExis.ngRecruiterID) 
   SET @varCurrentRecruiterPSRSID = dbo.GetRecruiterPSRS(@varCurrentRecruiterOrgID) 
   PRINT 'Current PSRS Org: '  + CAST(@varCurrentRecruiterPSRSID AS VARCHAR(10)) 
    
   IF ( (@varNewRecruiterPSRSID IS NOT NULL) AND (@varCurrentRecruiterPSRSID <> @varNewRecruiterPSRSID) ) 
   BEGIN 
    SET @varNewRecruiterOrgID = @varNewRecruiterPSRSID -- move to new PSRS 
    SET @varUpdateRecruiter = 1 
   END 
   ELSE 
   BEGIN 
    SET @varNewRecruiterOrgID = @varCurrentRecruiterOrgID -- leave at current org 
   END 
       
   IF (@varUpdateRecruiter = 1) 
   BEGIN 
    PRINT 'UPDATE PERSON ' + @LastName 
    UPDATE [dbo].[Person] 
     SET FirstName = @FirstName,  
     LastName=@LastName,  
     MiddleName=@MiddleInit,  
     DateOfBirth = @DateOfBirth 
    WHERE PersonID = @varExis.ngRecruiterPersonID 
     
    SET @varOldBilletID = (SELECT BilletID 
                FROM [dbo].[Recruiter] 
           WHERE RecruiterID = @varExis.ngRecruiterID) 
            
    SET @varOldBilletBeginDate = (SELECT BilletBeginDate 
                FROM [dbo].[Recruiter] 
           WHERE RecruiterID = @varExis.ngRecruiterID) 
    SET @varOldBilletEndDate = CASE WHEN @varOldBilletBeginDate > GETDATE() 
             THEN DATEADD(day, 1, @varOldBilletBeginDate) 
             ELSE GETDATE()  
             END  
    UPDATE [dbo].[Recruiter] 
    SET RecruiterID = @varExis.ngRecruiterID, 
     PersonID = @varExis.ngRecruiterPersonID, 
     Organiza.onID = @varNewRecruiterOrgID, 
     RankID = @varRankID, 
     BilletMOS = NULL, 
     BilletID = NULL, 
     PrimaryMOS = @PrimaryMOS, 
     BilletBeginDate = NULL, 
     BilletEndDate = NULL, 
     TourBeginDate = @CurrentTourBeginDate, 
     Es.matedTourEndDate = DATEADD(yy, 3, @CurrentTourBeginDate), 
     UpdatedByUser = @ODSEUserID, 
     DateUpdated = GETDATE() 
    WHERE RecruiterID = @varExis.ngRecruiterID    
              
    PRINT 'UPDATE HISTORY ' + CAST(@varNewRecruiterOrgID AS VARCHAR(4)) 
    INSERT INTO [dbo].[RecruiterHistory] 
    (RecruiterHistoryID, 
     RecruiterID, 
     BilletID, 
     BilletBeginDate, 
     BilletEndDate, 
     OrgUnitID, 
     UpdatedByUser, 
     DateUpdated) 
    VALUES  
    (NEWID(), 
    @varExis.ngRecruiterID, 
    (CASE WHEN @varOldBilletID IS NULL THEN 99 
    ELSE @varOldBilletID END), 
    @varOldBilletBeginDate, 
    @varOldBilletEndDate, 
    @varCurrentRecruiterOrgID, 
    @ODSEUserID, 
    GETDATE())     
   END 
  END 
  ELSE IF (@varNewRecruiterPSRSID IS NOT NULL) -- not exis.ng recruiter and new PSRS has been iden..ed   
  BEGIN   
   PRINT 'Insert new recruiter' 
     
   IF (@varNewPersonID IS NULL) 
   BEGIN 
    SET @varNewPersonID = NEWID() 
    INSERT INTO [dbo].[Person] 
     (PersonID,  
     FirstName,  
     LastName,  
     SSN,  
     MiddleName,  
     DateOfBirth) 
    VALUES ( 
     @varNewPersonID,  
     @FirstName,  
     @LastName,  
     @NineDigitSSN,      
     @MiddleInit,  
     @DateOfBirth) 
   END 
    
   SET @varNewRecruiterID = NEWID() 
   INSERT INTO [dbo].[Recruiter] 
    (RecruiterID,  
    PersonID,  
    Organiza.onID,  
    RankID,  
    BilletID, 
    BilletMOS,  
    PrimaryMOS,  
    TourBeginDate, 
    Es.matedTourEndDate,  
    UpdatedByUser,  
    DateUpdated) 
   VALUES ( 
    @varNewRecruiterID, 
    @varNewPersonID, 
    @varNewRecruiterPSRSID,             
    @varRankID, 
    @varNewBilletID, 
    @BilletMOS, 
    @PrimaryMOS, 
    @CurrentTourBeginDate, 
    DATEADD(yy, 3, @CurrentTourBeginDate), 
    @ODSEUserID, 
    GETDATE()) 
  END 
 END 
 
 UPDATE dbo.ODSE_BridgeToPSR 
 SET PSR_UPDATE_PENDING = 0  
 WHERE SSN = @TenDigitSSN 
  
 set @counter=@counter+1 
 print 'counter is ' + STR(@counter) 
--SELECT @FirstName, @LastName, @TenDigitSSN, @MiddleInit, @DateOfBirth, @Gender, @PrimaryMOS, @PayGrade, @ReenlistCode, @ReserveECC, @EAS, @PresentRUC, @ReserveRUC, @HomePhone, @Email, @Address1, @CityCode, @CountyCode, @StateCountryCode, @ZipCode, @DateOfRank, @Addi.onalMOS1, @Addi.onalMOS2, @PMCC, @NOKPhone, @MaritalStatus, @NumberOfDependents, @DropUnitDischargeDate, @ASVAB_GT, @ASVAB_MM, @ASVAB_CL, @ASVAB_EL, @Separa.onCode, @JoinDate, @ReserveRSC, @ComponentCode, @ConductAvgService, @ASVAB_EL, @Separa.onCode, @JoinDate, @ReserveRSC, @ComponentCode, @ConductAvgService, 
fetch next from cu_odsedata into  @FirstName 
         ,@LastName 
         ,@TenDigitSSN 
         ,@MiddleInit 
         ,@DateOfBirth 
         ,@Gender 
         ,@BilletMOS 
         ,@PrimaryMOS 
         ,@PayGrade 
         ,@ReenlistCode 
         ,@ReserveECC 
         ,@EAS 
         ,@PresentRUC 
         ,@ReserveRUC 
         ,@HomePhone 
         ,@Email 
         ,@Address1 
         ,@CityCode 
         ,@CountyCode 
         ,@StateCountryCode 
         ,@ZipCode 
         ,@DateOfRank 
         ,@Addi.onalMOS1 
         ,@Addi.onalMOS2 
         ,@PMCC 
         ,@RMCC 
         ,@NOKPhone 
         ,@MaritalStatus 
         ,@NumberOfDependents 
         ,@DropUnitDischargeDate 
         ,@ASVAB_GT 
         ,@ASVAB_MM 
         ,@ASVAB_CL 
         ,@ASVAB_EL 
         ,@JoinDate 
         ,@ReserveRSC 
         ,@ComponentCode 
         ,@ConductAvgService 
         ,@Pro.ciencyAvgService 
         ,@CurrentCityCode 
         ,@CurrentStateCode 
         ,@CurrentCountyCode 
         ,@DateCRCRCer..ca.on 
         ,@SatYears 
         ,@TotalRe.rementPoints 
         ,@DateArmedForcesAc.veDutyBase 
         ,@DatePayEntryBase 
         ,@Separa.onCode 
         ,@DateMostCurrentPhysical 
         ,@ReserveComponentCode 
         ,@CurrentTourBeginDate 
END -- WHILE (@@fetch_status = 0) 
 
close cu_odsedata 
deallocate cu_odsedata   
 
--clean up any leads in Unatached table that are in the system as Recruits 
delete from UnatachedLeads  
where SSN in (select SSN from recruit, person where person.personid = recruit.recrui.d) 
-- 
----clean up any leads in Unatached table that may no longer be in the Bridge table 
delete from UnatachedLeads  
where '0' + SSN not in (select SSN from ODSE_BridgeToPSR)]]></body>
<schema>CEC76C37-9D45-8E15-510C-CBE87FFE10F5</schema>
<database>0070DB58-AADF-159B-2831-3CD8EEAC6A57</database>
</StoredProcedureSqlServerv2k5>