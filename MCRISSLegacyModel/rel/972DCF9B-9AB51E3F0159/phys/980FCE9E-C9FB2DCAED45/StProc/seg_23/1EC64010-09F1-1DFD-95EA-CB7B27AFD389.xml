<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_TestAddShippers]" directorySegmentName="seg_23" id="1EC64010-09F1-1DFD-95EA-CB7B27AFD389">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@SSNPre.x   varchar(9), 
 @NumberToAdd  int, 
 @TrainingOrgID  int, 
 @ShipDate  date.me, 
 @PEBD   date.me, 
 @UserLogin  varchar(15) = 'SA' 
AS 
 
 
DECLARE @DBID    int 
DECLARE @DBNAME   nvarchar(128) 
 
DECLARE @NWAID   int 
DECLARE @ContractID   int 
DECLARE @ShipID   int 
DECLARE @PersonID  int 
 
DECLARE @ShipType   varchar(4) 
DECLARE @PayGradeCode  varchar(3) 
DECLARE @PGED   date.me 
DECLARE @AFADBD   date.me 
DECLARE @ComponentCode  varchar(2) 
DECLARE @ProjectedShipDate  date.me 
 
DECLARE @CandidateStatusID int 
DECLARE @StatusType  char(1) 
DECLARE @StatusCode  char(1) 
DECLARE @Disposi.onCode char(1) 
 
DECLARE @i   int 
DECLARE @ErrMsg   varchar(100) 
 
DECLARE @Ini.alSSN   char(9) 
DECLARE @FirstSSN  char(9) 
DECLARE @LastSSN  char(9) 
DECLARE @SSNMessage  varchar(100) 
 
DECLARE @TestMessage  varchar(250) 
 
DECLARE @SSN   char(9) 
DECLARE @LenSSNPre.x   int 
 
 
SET NOCOUNT ON  
 
SELECT  
 @DBID  = DB_ID(),  
 @DBNAME = DB_NAME() 
 
--- MAKE SURE THE NUMBER OF PEOPLE TO BE CONTRACTED IS BETWEEN 1 AND 9999 
IF @NumberToAdd NOT BETWEEN 1 AND 9999 
BEGIN 
 RAISERROR ('You must enter a number between 1 and 9999.', 16, 1, @DBID, @DBNAME) 
 RETURN  
END 
 
 
--- MAKE SURE THE SSN PREFIX IS 5 CHARACTERS LONG 
SET @LenSSNPre.x = LEN(@SSNPre.x) 
 
--- IF THE SSN PREFIX IS LESS THAN 5 CHARACTERS LONG, APPEND 0's UNTIL IT'S 5 CHARACTERS LONG 
IF @LenSSNPre.x < 5 
BEGIN 
 SET @SSNPre.x = RTRIM(@SSNPre.x) + REPLICATE('0', 5 - LEN(@SSNPre.x)) 
END 
 
--- INITIALIZE THE COUNTER 
SET @i = 1 
 
 
SET @Ini.alSSN = CASE  
   WHEN LEN(@SSNPre.x) = 9 THEN @SSNPre.x 
   WHEN EXISTS (SELECT 1 FROM PERSON P WHERE P.SOCIAL_SECURITY_NUMBER LIKE @SSNPre.x + '%') 
    THEN CONVERT(CHAR(9), CONVERT(INT, (SELECT MAX(P.SOCIAL_SECURITY_NUMBER) FROM PERSON P  
         WHERE P.SOCIAL_SECURITY_NUMBER LIKE @SSNPre.x + '%') + 1)) 
   ELSE @SSNPre.x + '0000' 
   END 
 
 
PRINT 'INITIAL SSN ' + @Ini.alSSN 
 
WHILE @i <= @NumberToAdd 
BEGIN 
 --- DEFINE THE SSN FOR THE PERSON TO BE SHIPPED 
 SET @SSN = CONVERT(CHAR(9), CONVERT(INT, @Ini.alSSN) + (@i - 1)) 
 
 
 --- MAKE SURE THE SSN BELONGS TO A CONTRACT/POOLEE 
 --- get the NWAID, ContractID and Status/Disposi.on 
 EXEC sp_GetCurrentStatusDisposi.on @SSN = @SSN, @NWAID = @NWAID OUTPUT, @ContractID = @ContractID OUTPUT,  
     @StatusType = @StatusType OUTPUT, @StatusCode = @StatusCode OUTPUT, @Disposi.onCode = @Disposi.onCode OUTPUT  
 
 
 --- PRINT TEST MESSAGE FOR DIAGNOSTIC PURPOSES 
 SET @TestMessage = 'ATTEMPTING TO SHIP SSN ' + @SSN + '.' + CHAR(13) + 
    'SSN ' + @SSN + ' HAS STATUS TYPE ' + @StatusType +  
    ' STATUS CODE ' + @StatusCode + ' DISPOSITION CODE ' + @Disposi.onCode + '.' 
 PRINT @TestMessage 
 
 IF @StatusType = 'E' AND @StatusCode = 'B' AND @Disposi.onCode = 'K' 
 BEGIN 
  --- GET THE COMPONENT CODE 
  SELECT     
   @ComponentCode = C.COMPONENT_CODE 
  FROM  
   CONTRACT C  
  WHERE  
   C.CONTRACT_ID = @ContractID 
 
 
  --- DEFINE THE SHIP_TYPE, PAY_GRADE_CODE, PAY_GRADE_ED_DATE AND AFADBD 
  SELECT  
   @ShipType = 'ENL', 
   @PayGradeCode = 'E1', 
   @PGED = @PEBD, 
   @AFADBD = @PEBD 
 
 
 
  --- START THE TRANSACTION 
  BEGIN TRANSACTION 
 
  --- INSERT SHIPPER DATA  
  INSERT INTO SHIPPER  
   (CONTRACT_ID, SHIP_TYPE, TRAINING_ORGANIZATION_ID, SHIP_DATE, PAY_ENTRY_BASE_DATE,  
   PAY_GRADE_CODE, PAY_GRADE_ED_DATE, AFADBD, COMPONENT_CODE, USER_LOGIN, UPDATE_DATE) 
  VALUES  
   (@ContractID, @ShipType, @TrainingOrgID, @ShipDate, @PEBD,  
   @PayGradeCode, @PGED, @AFADBD, @ComponentCode, @UserLogin, GETDATE()) 
 
 
  --- get the @ShipID 
  SELECT @ShipID = COALESCE(@@IDENTITY, (SELECT MAX(S.SHIP_ID) FROM SHIPPER S  
        WHERE S.CONTRACT_ID = @ContractID)) 
 
  IF @@ERROR != 0 OR @@ROWCOUNT = 0 
  BEGIN 
   ROLLBACK TRANSACTION 
   SET @ErrMsg = 'An error occurred adding the shipper record for SSN ' + @SSN + '.' 
   RAISERROR (@ErrMsg, 16, 2, @DBID, @DBNAME) 
   RETURN 
  END 
 
  --- INSERT CANDIDATE STATUS DATA 
  EXEC sp_UpdateCandidateStatus @NWAID = @NWAID, @StatusE.ec.veDate = @ShipDate,  
     @StatusType = 'E', @StatusCode = 'C', @Disposi.onCode = 'N',  
     @UserLogin = @UserLogin 
  
 
  IF @@ERROR != 0 OR @@ROWCOUNT = 0 
  BEGIN 
   ROLLBACK TRANSACTION 
   SET @ErrMsg = 'An error occurred adding the status record for SSN ' + @SSN + '.' 
   RAISERROR (@ErrMsg, 16, 3, @DBID, @DBNAME) 
   RETURN 
  END 
 
  --- UPDATE THE PROJECTED SHIP DATE IN THE CONTRACT TABLE IF IT'S DIFFERENT THAN THE ACTUAL SHIP DATE 
  SELECT @ProjectedShipDate = C.PROJECTED_SHIP_DATE FROM CONTRACT C WHERE C.CONTRACT_ID = @ContractID 
 
  IF @ProjectedShipDate != @ShipDate 
  BEGIN 
   --- INSERT PADD HISTORY DATA 
   EXEC sp_UpdatePADD @ContractID = @ContractID, @PADD = @ProjectedShipDate, @UserLogin = @UserLogin 
 
   IF @@ERROR != 0 OR @@ROWCOUNT = 0 
   BEGIN 
    ROLLBACK TRANSACTION 
    SET @ErrMsg = 'An error occurred upda.ng the PADD history record for SSN ' + @SSN + '.' 
    RAISERROR (@ErrMsg, 16, 4, @DBID, @DBNAME) 
    RETURN 
   END 
  END 
 
  --- ADD A RECRUIT TRAINING RECORD 
  EXEC sp_TestAddRecruitTraining @ShipID = @ShipID, @ShipDate = @ShipDate, @UserLogin = @UserLogin 
 
  IF @@ERROR != 0 OR @@ROWCOUNT = 0 
  BEGIN 
   ROLLBACK TRANSACTION 
   SET @ErrMsg = 'An error occurred upda.ng the recruit training record for SSN ' + @SSN + '.' 
   RAISERROR (@ErrMsg, 16, 5, @DBID, @DBNAME) 
   RETURN 
  END 
 
 
  --- IF WE MAKE IT HERE COMMIT THE TRANSACTION FOR THE SHIPPER DATA 
  COMMIT TRANSACTION  
 END 
 ELSE 
 BEGIN 
  SET @ErrMsg = 'SSN ' + @SSN + ' is not eligible to be shipped.' 
  RAISERROR (@ErrMsg, 16, 6, @DBID, @DBNAME) 
  RETURN 
 END 
 
 SELECT 
  @FirstSSN = CASE @i 
    WHEN 1 THEN @SSN 
    ELSE @FirstSSN 
    END, 
  @LastSSN = CASE  
    WHEN @i BETWEEN 1 AND @NumberToAdd THEN @SSN 
    ELSE @LastSSN  
    END 
 
 
 --- INCREMENT THE COUNTER 
 SET @i = @i + 1 
END 
 
SET NOCOUNT OFF 
 
 
--- DEFINE THE MESSAGE TO DISPLAY 
SET @SSNMessage = CASE  
   WHEN (@FirstSSN IS NOT NULL AND LEN(@FirstSSN) = 9) AND 
    (@LastSSN IS NOT NULL AND LEN(@LastSSN) = 9)  
   THEN 
    'The shippers added range from SSN ' + @FirstSSN + ' to ' + @LastSSN + '.' 
   ELSE SPACE(0) 
   END 
 
 
IF @SSNMessage IS NOT NULL AND LEN(@SSNMessage) > 0 
BEGIN 
 PRINT @SSNMessage 
END]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>