<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_GetChildOrgAvailableProgramsView]" directorySegmentName="seg_16" id="8B09DF5E-29EF-606A-8864-1DAA02C0CAD8">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:41 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[@OrgID  int, 
 @FY int 
AS 
 
SET NOCOUNT ON 
SET ANSI_WARNINGS OFF 
 
DECLARE @OrgType varchar(3) 
DECLARE @OrgName varchar(15) 
 
SELECT  
 @OrgType = ORGANIZATION_TYPE, 
 @OrgName = SHORT_NAME 
FROM  
 RECRUITING_ORGANIZATION  
WHERE  
 ORGANIZATION_ID = @OrgID 
 
 
CREATE TABLE #CHILD_ORGS (PARENT_ORGANIZATION_ID INT, CHILD_ORGANIZATION_ID INT) 
 
IF @OrgType = 'H' 
 BEGIN 
 --- GET THE DISTRICTS FOR MCRC 
 INSERT INTO #CHILD_ORGS 
 SELECT  
  @OrgID, ORGANIZATION_ID 
 FROM 
  RECRUITING_ORGANIZATION RO 
 WHERE 
  RO.ORGANIZATION_TYPE = 'D' 
 END 
ELSE  
 BEGIN 
 --- GET THE DISTRICS FOR REGIONS AND RSs FOR DISTRICTS 
 INSERT INTO #CHILD_ORGS 
 SELECT  
  @OrgID, CHILD_ORGANIZATION_ID 
 FROM 
  ORGANIZATION_MAP OM 
 WHERE 
  OM.PARENT_ORGANIZATION_ID = @OrgID 
 END 
 
CREATE TABLE #AVAILABLE_PROGRAMS  
 (PROGRAM_ID INT, PROGRAM_CODE VARCHAR(8), FY INT, PERIOD_CODE INT, PROGRAM_PERIOD_ID INT,  
 AVAILABLE_PROGRAM_COUNT INT, ASSIGNED_PROGRAM_COUNT INT,  
 ORG_ID INT, ORG_TYPE VARCHAR(3), ORG_NAME VARCHAR(15)) 
 
--- GET AVAILABLE PROGRAMS FOR CHILD ORGS 
INSERT INTO #AVAILABLE_PROGRAMS  
 (PROGRAM_ID, PROGRAM_CODE, FY, PERIOD_CODE, PROGRAM_PERIOD_ID,  
 AVAILABLE_PROGRAM_COUNT, ORG_ID, ORG_TYPE, ORG_NAME) 
SELECT  
 PG.PROGRAM_ID, 
 PG.PROGRAM_CODE + 
 CASE  
  WHEN PG.PROGRAM_DESCRIPTION LIKE '%FEMALE%' AND PG.PROGRAM_CODE NOT LIKE '%F' THEN ' - F' 
  ELSE SPACE(0) 
 END AS PROGRAM_CODE, 
 PP.FY, PP.PERIOD_CODE, PP.PROGRAM_PERIOD_ID,  
 --- GET AVAILABLE PROGRAM COUNT 
 COUNT(PA.PROGRAM_AVAILABILITY_ID) AS AVAILABLE_PROGRAM_COUNT, 
 RO.ORGANIZATION_ID AS ORG_ID, RO.ORGANIZATION_TYPE AS ORG_TYPE, RO.SHORT_NAME AS ORG_NAME 
FROM 
 PROGRAM PG INNER JOIN PROGRAM_PERIOD PP ON  
  (PP.FY = @FY AND 
  PG.STATUS = 'A') 
 INNER JOIN #CHILD_ORGS CO ON CO.PARENT_ORGANIZATION_ID = @OrgID 
 INNER JOIN RECRUITING_ORGANIZATION RO ON CO.CHILD_ORGANIZATION_ID = RO.ORGANIZATION_ID 
 LEFT OUTER JOIN PROGRAM_AVAILABILITY PA ON  
  (PG.PROGRAM_ID = PA.PROGRAM_ID AND 
  PA.PROGRAM_PERIOD_ID = PP.PROGRAM_PERIOD_ID AND 
  PA.ASSIGNED_ORGANIZATION_ID = RO.ORGANIZATION_ID AND 
  PA.CONTRACT_ID IS NULL AND 
  PA.PROGRAM_AVAILABILITY_ID NOT IN (SELECT PROGRAM_AVAILABILITY_ID FROM REMOVED_PROGRAMS))  
GROUP BY 
 RO.ORGANIZATION_ID, RO.ORGANIZATION_TYPE, RO.SHORT_NAME, CO.CHILD_ORGANIZATION_ID,  
 PG.PROGRAM_ID, PG.PROGRAM_CODE, PG.PROGRAM_DESCRIPTION, PP.PROGRAM_PERIOD_ID, PP.FY, PP.PERIOD_CODE 
ORDER BY 
 RO.SHORT_NAME,  
 PG.PROGRAM_CODE, PG.PROGRAM_ID, PP.PERIOD_CODE 
 
 
UPDATE 
 #AVAILABLE_PROGRAMS  
SET 
 ASSIGNED_PROGRAM_COUNT = CASE  
     WHEN @OrgType IN ('H', 'R') THEN  
      (SELECT COUNT(PA.PROGRAM_AVAILABILITY_ID) FROM PROGRAM_AVAILABILITY PA  
       INNER JOIN ORGANIZATION_MAP DIST ON  
        (PA.ASSIGNED_ORGANIZATION_ID = DIST.CHILD_ORGANIZATION_ID AND 
        DIST.PARENT_ORGANIZATION_ID = AP.ORG_ID) 
       WHERE PA.PROGRAM_ID = AP.PROGRAM_ID AND 
       PA.PROGRAM_PERIOD_ID = AP.PROGRAM_PERIOD_ID AND 
       PA.CONTRACT_ID IS NULL AND 
       PA.PROGRAM_AVAILABILITY_ID NOT IN (SELECT PROGRAM_AVAILABILITY_ID FROM REMOVED_PROGRAMS)) 
     ELSE 0 
    END 
FROM 
 #AVAILABLE_PROGRAMS AP 
 
 
--- RETURN DATA 
SELECT 
 PROGRAM_ID, PROGRAM_CODE, FY, PERIOD_CODE, 
 AVAILABLE_PROGRAM_COUNT, ASSIGNED_PROGRAM_COUNT, 
 ORG_ID, ORG_TYPE, ORG_NAME 
FROM 
 #AVAILABLE_PROGRAMS  
ORDER BY 
 CASE @OrgType 
  WHEN 'H' THEN CONVERT(VARCHAR(4), ORG_ID) 
  ELSE ORG_NAME 
 END, PROGRAM_CODE, PROGRAM_ID, PERIOD_CODE 
  
 
--- CLEAN UP 
DROP TABLE #CHILD_ORGS 
DROP TABLE #AVAILABLE_PROGRAMS  
 
SET ANSI_WARNINGS ON 
SET NOCOUNT OFF]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>