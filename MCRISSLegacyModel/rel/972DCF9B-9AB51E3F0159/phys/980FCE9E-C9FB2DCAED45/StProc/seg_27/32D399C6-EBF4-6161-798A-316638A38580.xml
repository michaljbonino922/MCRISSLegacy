<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[usp_build_restore_script]" directorySegmentName="seg_27" id="32D399C6-EBF4-6161-798A-316638A38580">
<sourceDDLFile>create MCRISS script - MCRISS OTA.txt</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 19:28:42 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[as 
-- 
-- This stored procedure was writen by Greg Larsen for Washington State Department of Health. 
-- Date: 12/16/2001 
-- 
-- Descrip.on: 
--  This stored procedure generates TSQL script that will restore all the databases  
--  on the current SQL Server.  This stored procedure takes into account when the last  
--  full and di.eren.al backups where taken, and how many transac.on log backups  
--  have been taken since the last database backup, based on the informa.on in 
--  the msdb database.  
-- 
-- Modi.ed: 
-- 
-- 
-- Declare variables used in SP 
declare @cmd nvarchar (1000)  
declare @cmd1 nvarchar (1000)  
declare @db nvarchar(128) 
declare @.lename nvarchar(128) 
declare @cnt int 
declare @num_processed int 
declare @name nvarchar(128)  
declare @physical_device_name nvarchar(128)  
declare @backup_start_date date.me 
declare @type char(1)  
-- Turn o. the row number message 
set nocount on 
  
-- SECTION 1 ---------------------------------------------- 
-- De.ne cursor to hold all the di.erent databases for the restore script will be built 
declare db cursor for  
select name from master..sysdatabases 
where name not in ('tempdb')  
  
-- Create a global temporary table that will hold the name of the backup, the database name, and the type of database backup. 
create table ##backupnames ( 
name nvarchar(100),  
database_name nvarchar(100),  
type char(1) ) 
  
-- Open cursor containing list of database names. 
open db 
fetch next from db into @db 
  
-- Process un.l no more databases are le. 
WHILE @@FETCH_STATUS = 0 
BEGIN 
-- Subsec.on 1A -------------------------------------------- 
-- ini.alize the physical device name 
 set @physical_device_name = '' 
-- get the name of the last full database backup 
 select @physical_device_name = physical_device_name , @backup_start_date = backup_start_date 
 from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id 
      join msdb..backupmediafamily c on a.media_set_id = c.media_set_id  
       where type='d' and backup_start_date =  
        (select top 1 backup_start_date from msdb..backupset  
             where @db = database_name and type = 'd' 
              order by backup_start_date desc)   
-- Did a full database backup name get found  
if @physical_device_name <> ''  
begin 
-- Build command to place a record in table that holds backup names 
  select @cmd = 'insert into ##backupnames values (' + char(39) +  
              @physical_device_name + char(39) + ',' + char(39) + @db + char(39) + ',' + 
              char(39) + 'd' + char(39)+ ')'      
-- Execute command to place a record in table that holds backup names       
  exec sp_executesql @cmd 
end 
-- Subsec.on 1B -------------------------------------------- 
-- Reset the physical device name  
set @physical_device_name = '' 
-- Find the last di.eren.al database backup 
 select @physical_device_name = physical_device_name, @backup_start_date = backup_start_date  
 from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id 
      join msdb..backupmediafamily c on a.media_set_id = c.media_set_id  
       where type='i' and backup_start_date =  
        (select top 1 backup_start_date from msdb..backupset  
             where @db = database_name and type = 'I' and backup_start_date > @backup_start_date  
              order by backup_start_date desc)  
-- Did a di.eren.al backup name get found 
if @physical_device_name <> '' 
begin 
  
-- Build command to place a record in table that holds backup names 
  select @cmd = 'insert into ##backupnames values (' + char(39) +  
              @physical_device_name + char(39) + ',' + char(39) + @db + char(39) + ',' + 
              char(39) + 'i' + char(39)+ ')'      
-- Execute command to place a record in table that holds backup names         
  exec sp_executesql @cmd 
end 
-- Subsec.on 1C -------------------------------------------- 
-- Build command to place records in table to hold backup names for all  
-- transac.on log backups from the last database backup 
set @CMD = 'insert into ##backupnames select physical_device_name,' + char(39) + @db + char(39) +  
 ',' + char(39) + 'l' + char(39) +    
 'from  msdb..backupset a join msdb..backupmediaset b on a.media_set_id = b.media_set_id join ' +  
 'msdb..backupmediafamily c on a.media_set_id = c.media_set_id ' +   
       'where type=' + char(39) + 'l' + char(39) + 'and backup_start_date >  @backup_start_dat and' +  
 char(39) + @db + char(39) + ' = database_name' 
-- Execute command to place records in table to hold backup names  
--  for all transac.on log backups from the last database backup 
exec sp_executesql @cmd,@params=N'@backup_start_dat date.me', @backup_start_dat = @backup_start_date 
-- get next database to process  
fetch next from db into @db 
end 
-- close  
close db 
-- Sec.on B ---------------------------------------------- 
open db 
-- Get .rst recod from database list cursor 
fetch next from db into @db 
-- Generate Heading in Restore script 
print '-- Restore All databases' 
  
-- Process all databases 
WHILE @@FETCH_STATUS = 0 
BEGIN 
-- de.ne cursor for all database and log backups for speci.c database being processed 
  declare backup_name cursor for  
     select name,type from ##backupnames where database_name = @DB 
-- Open cursor containing list of database backups for speci.c database being processed   
  open backup_name 
-- Determine the number of di.erent backups available for speci.c database being processed 
  select @CNT = count(*) from ##backupnames where database_name = @DB  
-- Get .rst database backup for speci.c database being processed 
  fetch next from backup_name into @physical_device_name, @type 
-- Set counter to track the number of backups processed 
  set @NUM_PROCESSED = 0 
-- Process un.l no more database backups exist for speci.c database being processed 
  WHILE @@FETCH_STATUS = 0 
  BEGIN 
-- Increment the counter to track the number of backups processed 
  set @NUM_PROCESSED = @NUM_PROCESSED + 1 
-- Is the number of database backup processed the same as the number of di.erent backups  
-- available for speci.c database being processed? 
  if @CNT = @NUM_PROCESSED 
-- If so, is the type of backup currently being processed a transac.on log backup? 
    if @TYPE = 'l' 
-- build restore command to restore the last transac.on log 
      select @cmd = 'restore log ' + rtrim(@db) + char(13) + 
              ' from disk = ' + char(39) +   
               rtrim(substring(@physical_device_name,1,len(@physical_device_name))) +  
                 char(39) + char(13) + ' with replace' 
    else 
-- Last backup was not a transac.on log backup 
-- Build restore command to restore the last database backup  
      select @cmd = 'restore database ' + rtrim(@db) + char(13) + 
            ' from disk = ' + char(39) +   
             rtrim(substring(@physical_device_name,1,len(@physical_device_name))) +  
               char(39) + char(13) + ' with replace' 
  else  
-- Current backup is not the last backup 
-- Is the current backup being processed a transac.on log backup? 
    if @TYPE = 'l' 
-- Build restore command to restore the current transac.on backup, with no recovery 
      select @cmd = 'restore log ' + rtrim(@db) + char(13) + 
              ' from disk = ' + char(39) +   
               rtrim(substring(@physical_device_name,1,len(@physical_device_name))) +  
                 char(39) + char(13) + ' with replace, norecovery' 
    else 
-- Current backup being processed is not a transac.on log backup 
-- Build restore command to restore the currrent database backup, with no recovery 
      select @cmd = 'restore database ' + rtrim(@db) + char(13) + 
           ' from disk = ' + char(39) +   
            rtrim(substring(@physical_device_name,1,len(@physical_device_name))) +  
              char(39) + char(13) + ' with replace, norecovery' 
 
-- if it is master comment line out 
   if @db = 'master'  
      set @cmd = '/* ' + char(13) + @cmd + char(13) + '*/' 
-- Generate the restore command and other commands for restore script 
   print @cmd 
   print 'go' 
   print ' ' 
     
-- Get next database backup to process 
  fetch next from backup_name into @physical_device_name, @type 
end  
-- Close and deallocate database backup name cursor for current database being processed 
close backup_name 
deallocate backup_name 
-- Get next database to process 
  fetch next from db into @db 
end 
-- Close and deallocate cursor containing list of databases to process 
close db 
deallocate db 
-- Drop global temporary table  
drop table ##backupnames]]></body>
<schema>3925E19F-DC76-90A4-B892-D7A526C79632</schema>
<database>B007042D-D2E3-F83F-481F-CEB23B21CB30</database>
</StoredProcedureSqlServerv2k5>