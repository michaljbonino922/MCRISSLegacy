<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureSqlServerv2k5 class="oracle.dbtools.crest.model.design.storage.sqlserver.v2k5.StoredProcedureSqlServerv2k5" name="[sp_UpdateGeoLoca.onForeign]" directorySegmentName="seg_24" id="338E3D64-03A5-52C0-6610-53DFF733C56E">
<sourceDDLFile>Appian.sql</sourceDDLFile>
<createdBy>MichalBonino</createdBy>
<createdTime>2024-04-29 23:57:48 UTC</createdTime>
<ownerDesignName>MCRISSLegacyModel</ownerDesignName>
<body><![CDATA[AS 
 
 
--Select rows from ODSE FOREIGN Table  that do not exist in  
--MCRISS GEO_LOCATION TABLE 
INSERT INTO GEO_LOCATION 
( 
CITY_CODE, 
COUNTY_CODE, 
STATE_CODE, 
COUNTRY_DESCRIPTION, 
CITY_TEXT, 
COUNTY_TEXT, 
USER_LOGIN, 
UPDATE_DATE, 
ROWGUID 
) 
SELECT 
CONVERT(INT,ODSE_FOREIGN.CITY_LOCATION_CD),--NOT NULL 
ISNULL((SELECT TOP 1 COUNTY_CODE FROM GEO_LOCATION WHERE STATE_CODE=ODSE_FOREIGN.COUNTRY_LOCATION_CD),0),--NOT NULL 
ODSE_FOREIGN.COUNTRY_LOCATION_CD,--NOT NULL 
ODSE_FOREIGN.COUNTRY_DESCRIPTION, 
ODSE_FOREIGN.CITY_DESCRIPTION, 
ODSE_FOREIGN.CITY_DESCRIPTION, 
'ODSE_IMPORT', 
GETDATE(), 
NEWID() 
FROM OPENQUERY(POS,'SELECT * FROM ODSE.LK_FOREIGN_SI_05') ODSE_FOREIGN LEFT OUTER JOIN GEO_LOCATION GEO 
ON ((ODSE_FOREIGN.COUNTRY_LOCATION_CD=GEO.STATE_CODE)  
AND (CONVERT(INT,ODSE_FOREIGN.CITY_LOCATION_CD)=GEO.CITY_CODE)) 
WHERE ODSE_FOREIGN.CITY_DESCRIPTION is not null and GEO.STATE_CODE IS NULL 
AND ((ISNUMERIC(LEFT(STATE_CODE,1))=0  AND ISNUMERIC(RIGHT(STATE_CODE,1))=0) 
OR (ISNUMERIC(LEFT(STATE_CODE,1))=1  AND ISNUMERIC(RIGHT(STATE_CODE,1))=0)) 
ORDER BY CITY_CODE,COUNTY_CODE ASC 
 
 
--Select rows from mcriss geo_loca.on that 
--exist in ODSE Foreign table BUT WHOSE DATA IS DIFFERENT 
 
UPDATE GEO_LOCATION 
SET  COUNTRY_DESCRIPTION=ODSE_FOREIGN.COUNTRY_DESCRIPTION, 
  COUNTY_TEXT=ODSE_FOREIGN.CITY_DESCRIPTION, 
  CITY_TEXT=ODSE_FOREIGN.CITY_DESCRIPTION, 
  USER_LOGIN='ODSE_IMPORT', 
  UPDATE_DATE=GETDATE() 
FROM   GEO_LOCATION GEO  
JOIN   OPENQUERY(POS,'SELECT * FROM ODSE.LK_FOREIGN_SI_05') ODSE_FOREIGN 
ON   ((GEO.STATE_CODE=ODSE_FOREIGN.COUNTRY_LOCATION_CD)  
AND  (GEO.CITY_CODE=CONVERT(INT,ODSE_FOREIGN.CITY_LOCATION_CD))) 
WHERE  ((ISNUMERIC(LEFT(GEO.STATE_CODE,1))=0  AND ISNUMERIC(RIGHT(GEO.STATE_CODE,1))=0) 
OR  (ISNUMERIC(LEFT(GEO.STATE_CODE,1))=1  AND ISNUMERIC(RIGHT(GEO.STATE_CODE,1))=0)) 
AND   (ISNULL(GEO.COUNTRY_DESCRIPTION,0)<>ODSE_FOREIGN.COUNTRY_DESCRIPTION 
OR  ISNULL(GEO.CITY_TEXT,0)<>ODSE_FOREIGN.CITY_DESCRIPTION) 
AND   (ISNULL(GEO.COUNTRY_DESCRIPTION,0)<>ODSE_FOREIGN.COUNTRY_DESCRIPTION 
OR  ISNULL(GEO.CITY_TEXT,0)<>ODSE_FOREIGN.CITY_DESCRIPTION)]]></body>
<schema>DD6CF638-A2EB-2E1B-FF13-422CA718DE2D</schema>
<database>EA42DEDC-DFC5-B775-3079-AD0E133F5E1D</database>
</StoredProcedureSqlServerv2k5>